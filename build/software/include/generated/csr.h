//--------------------------------------------------------------------------------
// Auto-generated by Migen (0d16e03) & LiteX (3fb99b7d) on 2020-05-26 21:20:29
//--------------------------------------------------------------------------------
#include <generated/soc.h>
#ifndef __GENERATED_CSR_H
#define __GENERATED_CSR_H
#include <stdint.h>
#ifdef CSR_ACCESSORS_DEFINED
extern void csr_write_simple(unsigned long v, unsigned long a);
extern unsigned long csr_read_simple(unsigned long a);
#else /* ! CSR_ACCESSORS_DEFINED */
#include <hw/common.h>
#endif /* ! CSR_ACCESSORS_DEFINED */

/* ctrl */
#define CSR_CTRL_BASE 0x82000000L
#define CSR_CTRL_RESET_ADDR 0x82000000L
#define CSR_CTRL_RESET_SIZE 1
static inline uint8_t ctrl_reset_read(void) {
	return csr_read_simple(0x82000000L);
}
static inline void ctrl_reset_write(uint8_t v) {
	csr_write_simple(v, 0x82000000L);
}
#define CSR_CTRL_SCRATCH_ADDR 0x82000004L
#define CSR_CTRL_SCRATCH_SIZE 4
static inline uint32_t ctrl_scratch_read(void) {
	uint32_t r = csr_read_simple(0x82000004L);
	r <<= 8;
	r |= csr_read_simple(0x82000008L);
	r <<= 8;
	r |= csr_read_simple(0x8200000cL);
	r <<= 8;
	r |= csr_read_simple(0x82000010L);
	return r;
}
static inline void ctrl_scratch_write(uint32_t v) {
	csr_write_simple(v >> 24, 0x82000004L);
	csr_write_simple(v >> 16, 0x82000008L);
	csr_write_simple(v >> 8, 0x8200000cL);
	csr_write_simple(v, 0x82000010L);
}
#define CSR_CTRL_BUS_ERRORS_ADDR 0x82000014L
#define CSR_CTRL_BUS_ERRORS_SIZE 4
static inline uint32_t ctrl_bus_errors_read(void) {
	uint32_t r = csr_read_simple(0x82000014L);
	r <<= 8;
	r |= csr_read_simple(0x82000018L);
	r <<= 8;
	r |= csr_read_simple(0x8200001cL);
	r <<= 8;
	r |= csr_read_simple(0x82000020L);
	return r;
}

/* identifier_mem */
#define CSR_IDENTIFIER_MEM_BASE 0x82001000L

/* uart_phy */
#define CSR_UART_PHY_BASE 0x82001800L
#define CSR_UART_PHY_TUNING_WORD_ADDR 0x82001800L
#define CSR_UART_PHY_TUNING_WORD_SIZE 4
static inline uint32_t uart_phy_tuning_word_read(void) {
	uint32_t r = csr_read_simple(0x82001800L);
	r <<= 8;
	r |= csr_read_simple(0x82001804L);
	r <<= 8;
	r |= csr_read_simple(0x82001808L);
	r <<= 8;
	r |= csr_read_simple(0x8200180cL);
	return r;
}
static inline void uart_phy_tuning_word_write(uint32_t v) {
	csr_write_simple(v >> 24, 0x82001800L);
	csr_write_simple(v >> 16, 0x82001804L);
	csr_write_simple(v >> 8, 0x82001808L);
	csr_write_simple(v, 0x8200180cL);
}

/* uart */
#define CSR_UART_BASE 0x82002000L
#define CSR_UART_RXTX_ADDR 0x82002000L
#define CSR_UART_RXTX_SIZE 1
static inline uint8_t uart_rxtx_read(void) {
	return csr_read_simple(0x82002000L);
}
static inline void uart_rxtx_write(uint8_t v) {
	csr_write_simple(v, 0x82002000L);
}
#define CSR_UART_TXFULL_ADDR 0x82002004L
#define CSR_UART_TXFULL_SIZE 1
static inline uint8_t uart_txfull_read(void) {
	return csr_read_simple(0x82002004L);
}
#define CSR_UART_RXEMPTY_ADDR 0x82002008L
#define CSR_UART_RXEMPTY_SIZE 1
static inline uint8_t uart_rxempty_read(void) {
	return csr_read_simple(0x82002008L);
}
#define CSR_UART_EV_STATUS_ADDR 0x8200200cL
#define CSR_UART_EV_STATUS_SIZE 1
static inline uint8_t uart_ev_status_read(void) {
	return csr_read_simple(0x8200200cL);
}
static inline void uart_ev_status_write(uint8_t v) {
	csr_write_simple(v, 0x8200200cL);
}
#define CSR_UART_EV_PENDING_ADDR 0x82002010L
#define CSR_UART_EV_PENDING_SIZE 1
static inline uint8_t uart_ev_pending_read(void) {
	return csr_read_simple(0x82002010L);
}
static inline void uart_ev_pending_write(uint8_t v) {
	csr_write_simple(v, 0x82002010L);
}
#define CSR_UART_EV_ENABLE_ADDR 0x82002014L
#define CSR_UART_EV_ENABLE_SIZE 1
static inline uint8_t uart_ev_enable_read(void) {
	return csr_read_simple(0x82002014L);
}
static inline void uart_ev_enable_write(uint8_t v) {
	csr_write_simple(v, 0x82002014L);
}

/* timer0 */
#define CSR_TIMER0_BASE 0x82002800L
#define CSR_TIMER0_LOAD_ADDR 0x82002800L
#define CSR_TIMER0_LOAD_SIZE 4
static inline uint32_t timer0_load_read(void) {
	uint32_t r = csr_read_simple(0x82002800L);
	r <<= 8;
	r |= csr_read_simple(0x82002804L);
	r <<= 8;
	r |= csr_read_simple(0x82002808L);
	r <<= 8;
	r |= csr_read_simple(0x8200280cL);
	return r;
}
static inline void timer0_load_write(uint32_t v) {
	csr_write_simple(v >> 24, 0x82002800L);
	csr_write_simple(v >> 16, 0x82002804L);
	csr_write_simple(v >> 8, 0x82002808L);
	csr_write_simple(v, 0x8200280cL);
}
#define CSR_TIMER0_RELOAD_ADDR 0x82002810L
#define CSR_TIMER0_RELOAD_SIZE 4
static inline uint32_t timer0_reload_read(void) {
	uint32_t r = csr_read_simple(0x82002810L);
	r <<= 8;
	r |= csr_read_simple(0x82002814L);
	r <<= 8;
	r |= csr_read_simple(0x82002818L);
	r <<= 8;
	r |= csr_read_simple(0x8200281cL);
	return r;
}
static inline void timer0_reload_write(uint32_t v) {
	csr_write_simple(v >> 24, 0x82002810L);
	csr_write_simple(v >> 16, 0x82002814L);
	csr_write_simple(v >> 8, 0x82002818L);
	csr_write_simple(v, 0x8200281cL);
}
#define CSR_TIMER0_EN_ADDR 0x82002820L
#define CSR_TIMER0_EN_SIZE 1
static inline uint8_t timer0_en_read(void) {
	return csr_read_simple(0x82002820L);
}
static inline void timer0_en_write(uint8_t v) {
	csr_write_simple(v, 0x82002820L);
}
#define CSR_TIMER0_UPDATE_VALUE_ADDR 0x82002824L
#define CSR_TIMER0_UPDATE_VALUE_SIZE 1
static inline uint8_t timer0_update_value_read(void) {
	return csr_read_simple(0x82002824L);
}
static inline void timer0_update_value_write(uint8_t v) {
	csr_write_simple(v, 0x82002824L);
}
#define CSR_TIMER0_VALUE_ADDR 0x82002828L
#define CSR_TIMER0_VALUE_SIZE 4
static inline uint32_t timer0_value_read(void) {
	uint32_t r = csr_read_simple(0x82002828L);
	r <<= 8;
	r |= csr_read_simple(0x8200282cL);
	r <<= 8;
	r |= csr_read_simple(0x82002830L);
	r <<= 8;
	r |= csr_read_simple(0x82002834L);
	return r;
}
#define CSR_TIMER0_EV_STATUS_ADDR 0x82002838L
#define CSR_TIMER0_EV_STATUS_SIZE 1
static inline uint8_t timer0_ev_status_read(void) {
	return csr_read_simple(0x82002838L);
}
static inline void timer0_ev_status_write(uint8_t v) {
	csr_write_simple(v, 0x82002838L);
}
#define CSR_TIMER0_EV_PENDING_ADDR 0x8200283cL
#define CSR_TIMER0_EV_PENDING_SIZE 1
static inline uint8_t timer0_ev_pending_read(void) {
	return csr_read_simple(0x8200283cL);
}
static inline void timer0_ev_pending_write(uint8_t v) {
	csr_write_simple(v, 0x8200283cL);
}
#define CSR_TIMER0_EV_ENABLE_ADDR 0x82002840L
#define CSR_TIMER0_EV_ENABLE_SIZE 1
static inline uint8_t timer0_ev_enable_read(void) {
	return csr_read_simple(0x82002840L);
}
static inline void timer0_ev_enable_write(uint8_t v) {
	csr_write_simple(v, 0x82002840L);
}

/* buttons */
#define CSR_BUTTONS_BASE 0x82003000L
#define CSR_BUTTONS_IN_ADDR 0x82003000L
#define CSR_BUTTONS_IN_SIZE 1
static inline uint8_t buttons_in_read(void) {
	return csr_read_simple(0x82003000L);
}
#define CSR_BUTTONS_DIR_ADDR 0x82003004L
#define CSR_BUTTONS_DIR_SIZE 1
static inline uint8_t buttons_dir_read(void) {
	return csr_read_simple(0x82003004L);
}
#define CSR_BUTTONS_EV_STATUS_ADDR 0x82003008L
#define CSR_BUTTONS_EV_STATUS_SIZE 1
static inline uint8_t buttons_ev_status_read(void) {
	return csr_read_simple(0x82003008L);
}
static inline void buttons_ev_status_write(uint8_t v) {
	csr_write_simple(v, 0x82003008L);
}
#define CSR_BUTTONS_EV_PENDING_ADDR 0x8200300cL
#define CSR_BUTTONS_EV_PENDING_SIZE 1
static inline uint8_t buttons_ev_pending_read(void) {
	return csr_read_simple(0x8200300cL);
}
static inline void buttons_ev_pending_write(uint8_t v) {
	csr_write_simple(v, 0x8200300cL);
}
#define CSR_BUTTONS_EV_ENABLE_ADDR 0x82003010L
#define CSR_BUTTONS_EV_ENABLE_SIZE 1
static inline uint8_t buttons_ev_enable_read(void) {
	return csr_read_simple(0x82003010L);
}
static inline void buttons_ev_enable_write(uint8_t v) {
	csr_write_simple(v, 0x82003010L);
}

/* lcd_core */
#define CSR_LCD_CORE_BASE 0x82003800L
#define CSR_LCD_CORE_DATA_ADDR 0x82003800L
#define CSR_LCD_CORE_DATA_SIZE 1
static inline uint8_t lcd_core_DATA_read(void) {
	return csr_read_simple(0x82003800L);
}
static inline void lcd_core_DATA_write(uint8_t v) {
	csr_write_simple(v, 0x82003800L);
}
#define CSR_LCD_CORE_ADDR_ADDR 0x82003804L
#define CSR_LCD_CORE_ADDR_SIZE 1
static inline uint8_t lcd_core_ADDR_read(void) {
	return csr_read_simple(0x82003804L);
}
static inline void lcd_core_ADDR_write(uint8_t v) {
	csr_write_simple(v, 0x82003804L);
}
#define CSR_LCD_CORE_BUSY_ADDR 0x82003808L
#define CSR_LCD_CORE_BUSY_SIZE 1
static inline uint8_t lcd_core_BUSY_read(void) {
	return csr_read_simple(0x82003808L);
}
#define CSR_LCD_CORE_START_ADDR 0x8200380cL
#define CSR_LCD_CORE_START_SIZE 1
static inline uint8_t lcd_core_START_read(void) {
	return csr_read_simple(0x8200380cL);
}
static inline void lcd_core_START_write(uint8_t v) {
	csr_write_simple(v, 0x8200380cL);
}
#define CSR_LCD_CORE_OPTION_ADDR 0x82003810L
#define CSR_LCD_CORE_OPTION_SIZE 1
static inline uint8_t lcd_core_OPTION_read(void) {
	return csr_read_simple(0x82003810L);
}
static inline void lcd_core_OPTION_write(uint8_t v) {
	csr_write_simple(v, 0x82003810L);
}
#define CSR_LCD_CORE_CS__ADDR 0x82003814L
#define CSR_LCD_CORE_CS__SIZE 1
static inline uint8_t lcd_core_CS__read(void) {
	return csr_read_simple(0x82003814L);
}
static inline void lcd_core_CS__write(uint8_t v) {
	csr_write_simple(v, 0x82003814L);
}

#endif
