//--------------------------------------------------------------------------------
// Auto-generated by Migen (b1b2b29) & LiteX (c3ed8025) on 2020-06-25 17:18:51
//--------------------------------------------------------------------------------
module __main__(
	output reg serial_tx,
	input wire serial_rx,
	input wire clk100,
	input wire cpu_reset,
	input wire user_btn0,
	input wire user_btn1,
	input wire user_btn2,
	input wire user_btn3,
	input wire user_btn4,
	output wire [7:0] db,
	output wire cs,
	output wire rs,
	output wire rd,
	output wire wr,
	output wire rst,
	output wire [7:0] db1,
	output wire cs1,
	output wire rs1,
	output wire rd1,
	output wire wr1,
	output wire rst1,
	input wire uart00_tx,
	input wire uart00_rx
);

reg basesoc_soccontroller_reset_storage = 1'd0;
reg basesoc_soccontroller_reset_re = 1'd0;
reg [31:0] basesoc_soccontroller_scratch_storage = 32'd305419896;
reg basesoc_soccontroller_scratch_re = 1'd0;
wire [31:0] basesoc_soccontroller_bus_errors_status;
wire basesoc_soccontroller_bus_errors_we;
wire basesoc_soccontroller_reset;
wire basesoc_soccontroller_bus_error;
reg [31:0] basesoc_soccontroller_bus_errors = 32'd0;
wire basesoc_cpu_reset;
reg [31:0] basesoc_cpu_interrupt = 32'd0;
wire [29:0] basesoc_cpu_ibus_adr;
wire [31:0] basesoc_cpu_ibus_dat_w;
wire [31:0] basesoc_cpu_ibus_dat_r;
wire [3:0] basesoc_cpu_ibus_sel;
wire basesoc_cpu_ibus_cyc;
wire basesoc_cpu_ibus_stb;
wire basesoc_cpu_ibus_ack;
wire basesoc_cpu_ibus_we;
wire [2:0] basesoc_cpu_ibus_cti;
wire [1:0] basesoc_cpu_ibus_bte;
wire basesoc_cpu_ibus_err;
wire [29:0] basesoc_cpu_dbus_adr;
wire [31:0] basesoc_cpu_dbus_dat_w;
wire [31:0] basesoc_cpu_dbus_dat_r;
wire [3:0] basesoc_cpu_dbus_sel;
wire basesoc_cpu_dbus_cyc;
wire basesoc_cpu_dbus_stb;
wire basesoc_cpu_dbus_ack;
wire basesoc_cpu_dbus_we;
wire [2:0] basesoc_cpu_dbus_cti;
wire [1:0] basesoc_cpu_dbus_bte;
wire basesoc_cpu_dbus_err;
reg [31:0] basesoc_vexriscv = 32'd0;
wire [29:0] basesoc_basesoc_ram_bus_adr;
wire [31:0] basesoc_basesoc_ram_bus_dat_w;
wire [31:0] basesoc_basesoc_ram_bus_dat_r;
wire [3:0] basesoc_basesoc_ram_bus_sel;
wire basesoc_basesoc_ram_bus_cyc;
wire basesoc_basesoc_ram_bus_stb;
reg basesoc_basesoc_ram_bus_ack = 1'd0;
wire basesoc_basesoc_ram_bus_we;
wire [2:0] basesoc_basesoc_ram_bus_cti;
wire [1:0] basesoc_basesoc_ram_bus_bte;
reg basesoc_basesoc_ram_bus_err = 1'd0;
wire [12:0] basesoc_basesoc_adr;
wire [31:0] basesoc_basesoc_dat_r;
wire [29:0] basesoc_interface0_ram_bus_adr;
wire [31:0] basesoc_interface0_ram_bus_dat_w;
wire [31:0] basesoc_interface0_ram_bus_dat_r;
wire [3:0] basesoc_interface0_ram_bus_sel;
wire basesoc_interface0_ram_bus_cyc;
wire basesoc_interface0_ram_bus_stb;
reg basesoc_interface0_ram_bus_ack = 1'd0;
wire basesoc_interface0_ram_bus_we;
wire [2:0] basesoc_interface0_ram_bus_cti;
wire [1:0] basesoc_interface0_ram_bus_bte;
reg basesoc_interface0_ram_bus_err = 1'd0;
wire [9:0] basesoc_sram0_adr;
wire [31:0] basesoc_sram0_dat_r;
reg [3:0] basesoc_sram0_we = 4'd0;
wire [31:0] basesoc_sram0_dat_w;
wire [29:0] basesoc_interface1_ram_bus_adr;
wire [31:0] basesoc_interface1_ram_bus_dat_w;
wire [31:0] basesoc_interface1_ram_bus_dat_r;
wire [3:0] basesoc_interface1_ram_bus_sel;
wire basesoc_interface1_ram_bus_cyc;
wire basesoc_interface1_ram_bus_stb;
reg basesoc_interface1_ram_bus_ack = 1'd0;
wire basesoc_interface1_ram_bus_we;
wire [2:0] basesoc_interface1_ram_bus_cti;
wire [1:0] basesoc_interface1_ram_bus_bte;
reg basesoc_interface1_ram_bus_err = 1'd0;
wire [11:0] basesoc_sram1_adr;
wire [31:0] basesoc_sram1_dat_r;
reg [3:0] basesoc_sram1_we = 4'd0;
wire [31:0] basesoc_sram1_dat_w;
reg [31:0] basesoc_storage = 32'd4947802;
reg basesoc_re = 1'd0;
wire basesoc_sink_valid;
reg basesoc_sink_ready = 1'd0;
wire basesoc_sink_first;
wire basesoc_sink_last;
wire [7:0] basesoc_sink_payload_data;
reg basesoc_uart_clk_txen = 1'd0;
reg [31:0] basesoc_phase_accumulator_tx = 32'd0;
reg [7:0] basesoc_tx_reg = 8'd0;
reg [3:0] basesoc_tx_bitcount = 4'd0;
reg basesoc_tx_busy = 1'd0;
reg basesoc_source_valid = 1'd0;
wire basesoc_source_ready;
reg basesoc_source_first = 1'd0;
reg basesoc_source_last = 1'd0;
reg [7:0] basesoc_source_payload_data = 8'd0;
reg basesoc_uart_clk_rxen = 1'd0;
reg [31:0] basesoc_phase_accumulator_rx = 32'd0;
wire basesoc_rx;
reg basesoc_rx_r = 1'd0;
reg [7:0] basesoc_rx_reg = 8'd0;
reg [3:0] basesoc_rx_bitcount = 4'd0;
reg basesoc_rx_busy = 1'd0;
wire basesoc_uart_rxtx_re;
wire [7:0] basesoc_uart_rxtx_r;
wire basesoc_uart_rxtx_we;
wire [7:0] basesoc_uart_rxtx_w;
wire basesoc_uart_txfull_status;
wire basesoc_uart_txfull_we;
wire basesoc_uart_rxempty_status;
wire basesoc_uart_rxempty_we;
wire basesoc_uart_irq;
wire basesoc_uart_tx_status;
reg basesoc_uart_tx_pending = 1'd0;
wire basesoc_uart_tx_trigger;
reg basesoc_uart_tx_clear = 1'd0;
reg basesoc_uart_tx_old_trigger = 1'd0;
wire basesoc_uart_rx_status;
reg basesoc_uart_rx_pending = 1'd0;
wire basesoc_uart_rx_trigger;
reg basesoc_uart_rx_clear = 1'd0;
reg basesoc_uart_rx_old_trigger = 1'd0;
wire basesoc_uart_eventmanager_status_re;
wire [1:0] basesoc_uart_eventmanager_status_r;
wire basesoc_uart_eventmanager_status_we;
reg [1:0] basesoc_uart_eventmanager_status_w = 2'd0;
wire basesoc_uart_eventmanager_pending_re;
wire [1:0] basesoc_uart_eventmanager_pending_r;
wire basesoc_uart_eventmanager_pending_we;
reg [1:0] basesoc_uart_eventmanager_pending_w = 2'd0;
reg [1:0] basesoc_uart_eventmanager_storage = 2'd0;
reg basesoc_uart_eventmanager_re = 1'd0;
wire basesoc_uart_uart_sink_valid;
wire basesoc_uart_uart_sink_ready;
wire basesoc_uart_uart_sink_first;
wire basesoc_uart_uart_sink_last;
wire [7:0] basesoc_uart_uart_sink_payload_data;
wire basesoc_uart_uart_source_valid;
wire basesoc_uart_uart_source_ready;
wire basesoc_uart_uart_source_first;
wire basesoc_uart_uart_source_last;
wire [7:0] basesoc_uart_uart_source_payload_data;
wire basesoc_uart_tx_fifo_sink_valid;
wire basesoc_uart_tx_fifo_sink_ready;
reg basesoc_uart_tx_fifo_sink_first = 1'd0;
reg basesoc_uart_tx_fifo_sink_last = 1'd0;
wire [7:0] basesoc_uart_tx_fifo_sink_payload_data;
wire basesoc_uart_tx_fifo_source_valid;
wire basesoc_uart_tx_fifo_source_ready;
wire basesoc_uart_tx_fifo_source_first;
wire basesoc_uart_tx_fifo_source_last;
wire [7:0] basesoc_uart_tx_fifo_source_payload_data;
wire basesoc_uart_tx_fifo_re;
reg basesoc_uart_tx_fifo_readable = 1'd0;
wire basesoc_uart_tx_fifo_syncfifo_we;
wire basesoc_uart_tx_fifo_syncfifo_writable;
wire basesoc_uart_tx_fifo_syncfifo_re;
wire basesoc_uart_tx_fifo_syncfifo_readable;
wire [9:0] basesoc_uart_tx_fifo_syncfifo_din;
wire [9:0] basesoc_uart_tx_fifo_syncfifo_dout;
reg [4:0] basesoc_uart_tx_fifo_level0 = 5'd0;
reg basesoc_uart_tx_fifo_replace = 1'd0;
reg [3:0] basesoc_uart_tx_fifo_produce = 4'd0;
reg [3:0] basesoc_uart_tx_fifo_consume = 4'd0;
reg [3:0] basesoc_uart_tx_fifo_wrport_adr = 4'd0;
wire [9:0] basesoc_uart_tx_fifo_wrport_dat_r;
wire basesoc_uart_tx_fifo_wrport_we;
wire [9:0] basesoc_uart_tx_fifo_wrport_dat_w;
wire basesoc_uart_tx_fifo_do_read;
wire [3:0] basesoc_uart_tx_fifo_rdport_adr;
wire [9:0] basesoc_uart_tx_fifo_rdport_dat_r;
wire basesoc_uart_tx_fifo_rdport_re;
wire [4:0] basesoc_uart_tx_fifo_level1;
wire [7:0] basesoc_uart_tx_fifo_fifo_in_payload_data;
wire basesoc_uart_tx_fifo_fifo_in_first;
wire basesoc_uart_tx_fifo_fifo_in_last;
wire [7:0] basesoc_uart_tx_fifo_fifo_out_payload_data;
wire basesoc_uart_tx_fifo_fifo_out_first;
wire basesoc_uart_tx_fifo_fifo_out_last;
wire basesoc_uart_rx_fifo_sink_valid;
wire basesoc_uart_rx_fifo_sink_ready;
wire basesoc_uart_rx_fifo_sink_first;
wire basesoc_uart_rx_fifo_sink_last;
wire [7:0] basesoc_uart_rx_fifo_sink_payload_data;
wire basesoc_uart_rx_fifo_source_valid;
wire basesoc_uart_rx_fifo_source_ready;
wire basesoc_uart_rx_fifo_source_first;
wire basesoc_uart_rx_fifo_source_last;
wire [7:0] basesoc_uart_rx_fifo_source_payload_data;
wire basesoc_uart_rx_fifo_re;
reg basesoc_uart_rx_fifo_readable = 1'd0;
wire basesoc_uart_rx_fifo_syncfifo_we;
wire basesoc_uart_rx_fifo_syncfifo_writable;
wire basesoc_uart_rx_fifo_syncfifo_re;
wire basesoc_uart_rx_fifo_syncfifo_readable;
wire [9:0] basesoc_uart_rx_fifo_syncfifo_din;
wire [9:0] basesoc_uart_rx_fifo_syncfifo_dout;
reg [4:0] basesoc_uart_rx_fifo_level0 = 5'd0;
reg basesoc_uart_rx_fifo_replace = 1'd0;
reg [3:0] basesoc_uart_rx_fifo_produce = 4'd0;
reg [3:0] basesoc_uart_rx_fifo_consume = 4'd0;
reg [3:0] basesoc_uart_rx_fifo_wrport_adr = 4'd0;
wire [9:0] basesoc_uart_rx_fifo_wrport_dat_r;
wire basesoc_uart_rx_fifo_wrport_we;
wire [9:0] basesoc_uart_rx_fifo_wrport_dat_w;
wire basesoc_uart_rx_fifo_do_read;
wire [3:0] basesoc_uart_rx_fifo_rdport_adr;
wire [9:0] basesoc_uart_rx_fifo_rdport_dat_r;
wire basesoc_uart_rx_fifo_rdport_re;
wire [4:0] basesoc_uart_rx_fifo_level1;
wire [7:0] basesoc_uart_rx_fifo_fifo_in_payload_data;
wire basesoc_uart_rx_fifo_fifo_in_first;
wire basesoc_uart_rx_fifo_fifo_in_last;
wire [7:0] basesoc_uart_rx_fifo_fifo_out_payload_data;
wire basesoc_uart_rx_fifo_fifo_out_first;
wire basesoc_uart_rx_fifo_fifo_out_last;
reg basesoc_uart_reset = 1'd0;
reg [31:0] basesoc_timer_load_storage = 32'd0;
reg basesoc_timer_load_re = 1'd0;
reg [31:0] basesoc_timer_reload_storage = 32'd0;
reg basesoc_timer_reload_re = 1'd0;
reg basesoc_timer_en_storage = 1'd0;
reg basesoc_timer_en_re = 1'd0;
reg basesoc_timer_update_value_storage = 1'd0;
reg basesoc_timer_update_value_re = 1'd0;
reg [31:0] basesoc_timer_value_status = 32'd0;
wire basesoc_timer_value_we;
wire basesoc_timer_irq;
wire basesoc_timer_zero_status;
reg basesoc_timer_zero_pending = 1'd0;
wire basesoc_timer_zero_trigger;
reg basesoc_timer_zero_clear = 1'd0;
reg basesoc_timer_zero_old_trigger = 1'd0;
wire basesoc_timer_eventmanager_status_re;
wire basesoc_timer_eventmanager_status_r;
wire basesoc_timer_eventmanager_status_we;
wire basesoc_timer_eventmanager_status_w;
wire basesoc_timer_eventmanager_pending_re;
wire basesoc_timer_eventmanager_pending_r;
wire basesoc_timer_eventmanager_pending_we;
wire basesoc_timer_eventmanager_pending_w;
reg basesoc_timer_eventmanager_storage = 1'd0;
reg basesoc_timer_eventmanager_re = 1'd0;
reg [31:0] basesoc_timer_value = 32'd0;
reg [13:0] basesoc_interface_adr = 14'd0;
reg basesoc_interface_we = 1'd0;
wire [7:0] basesoc_interface_dat_w;
wire [7:0] basesoc_interface_dat_r;
wire [29:0] basesoc_wishbone_adr;
wire [31:0] basesoc_wishbone_dat_w;
wire [31:0] basesoc_wishbone_dat_r;
wire [3:0] basesoc_wishbone_sel;
wire basesoc_wishbone_cyc;
wire basesoc_wishbone_stb;
reg basesoc_wishbone_ack = 1'd0;
wire basesoc_wishbone_we;
wire [2:0] basesoc_wishbone_cti;
wire [1:0] basesoc_wishbone_bte;
reg basesoc_wishbone_err = 1'd0;
wire sys_clk;
wire sys_rst;
wire por_clk;
reg int_rst = 1'd1;
wire [4:0] buttons_in_status;
wire buttons_in_we;
reg [7:0] buttons_dir_status = 8'd0;
wire buttons_dir_we;
wire buttons_irq;
wire buttons_arriba_status;
reg buttons_arriba_pending = 1'd0;
wire buttons_arriba_trigger;
reg buttons_arriba_clear = 1'd0;
reg buttons_arriba_old_trigger = 1'd0;
wire buttons_abajo_status;
reg buttons_abajo_pending = 1'd0;
wire buttons_abajo_trigger;
reg buttons_abajo_clear = 1'd0;
reg buttons_abajo_old_trigger = 1'd0;
wire buttons_derecha_status;
reg buttons_derecha_pending = 1'd0;
wire buttons_derecha_trigger;
reg buttons_derecha_clear = 1'd0;
reg buttons_derecha_old_trigger = 1'd0;
wire buttons_izquierda_status;
reg buttons_izquierda_pending = 1'd0;
wire buttons_izquierda_trigger;
reg buttons_izquierda_clear = 1'd0;
reg buttons_izquierda_old_trigger = 1'd0;
wire buttons_pause_status;
reg buttons_pause_pending = 1'd0;
wire buttons_pause_trigger;
reg buttons_pause_clear = 1'd0;
reg buttons_pause_old_trigger = 1'd0;
reg [7:0] DATA_storage = 8'd0;
reg DATA_re = 1'd0;
reg [7:0] ADDR_storage = 8'd0;
reg ADDR_re = 1'd0;
wire status;
wire we;
reg [1:0] START_storage = 2'd0;
reg START_re = 1'd0;
reg OPTION_storage = 1'd0;
reg OPTION_re = 1'd0;
reg CS__storage = 1'd0;
reg CS__re = 1'd0;
wire [7:0] db_;
wire rs_;
wire rd_;
wire wr_;
wire rst_;
wire cs_;
wire [7:0] data;
wire [7:0] addr;
reg busy = 1'd0;
wire start;
wire option;
reg [7:0] db_1 = 8'd0;
reg rs_1 = 1'd0;
reg rd_1 = 1'd0;
reg wr_1 = 1'd0;
reg rst_1 = 1'd0;
reg [3:0] manage = 4'd0;
reg [3:0] count2 = 4'd0;
reg [3:0] countwr = 4'd0;
reg [2:0] manage_ant = 3'd0;
wire rs232phy_sink_valid;
reg rs232phy_sink_ready = 1'd0;
wire rs232phy_sink_first;
wire rs232phy_sink_last;
wire [7:0] rs232phy_sink_payload_data;
reg rs232phy_source_valid = 1'd0;
wire rs232phy_source_ready;
reg rs232phy_source_first = 1'd0;
reg rs232phy_source_last = 1'd0;
reg [7:0] rs232phy_source_payload_data = 8'd0;
wire uart_rxtx_re;
wire [7:0] uart_rxtx_r;
wire uart_rxtx_we;
wire [7:0] uart_rxtx_w;
wire uart_txfull_status;
wire uart_txfull_we;
wire uart_rxempty_status;
wire uart_rxempty_we;
wire uart_irq;
wire uart_tx_status;
reg uart_tx_pending = 1'd0;
wire uart_tx_trigger;
reg uart_tx_clear = 1'd0;
reg uart_tx_old_trigger = 1'd0;
wire uart_rx_status;
reg uart_rx_pending = 1'd0;
wire uart_rx_trigger;
reg uart_rx_clear = 1'd0;
reg uart_rx_old_trigger = 1'd0;
wire uart_eventmanager_status_re;
wire [1:0] uart_eventmanager_status_r;
wire uart_eventmanager_status_we;
reg [1:0] uart_eventmanager_status_w = 2'd0;
wire uart_eventmanager_pending_re;
wire [1:0] uart_eventmanager_pending_r;
wire uart_eventmanager_pending_we;
reg [1:0] uart_eventmanager_pending_w = 2'd0;
reg [1:0] uart_eventmanager_storage = 2'd0;
reg uart_eventmanager_re = 1'd0;
wire uart_uart_sink_valid;
wire uart_uart_sink_ready;
wire uart_uart_sink_first;
wire uart_uart_sink_last;
wire [7:0] uart_uart_sink_payload_data;
wire uart_uart_source_valid;
wire uart_uart_source_ready;
wire uart_uart_source_first;
wire uart_uart_source_last;
wire [7:0] uart_uart_source_payload_data;
wire uart_tx_fifo_sink_valid;
wire uart_tx_fifo_sink_ready;
reg uart_tx_fifo_sink_first = 1'd0;
reg uart_tx_fifo_sink_last = 1'd0;
wire [7:0] uart_tx_fifo_sink_payload_data;
wire uart_tx_fifo_source_valid;
wire uart_tx_fifo_source_ready;
wire uart_tx_fifo_source_first;
wire uart_tx_fifo_source_last;
wire [7:0] uart_tx_fifo_source_payload_data;
wire uart_tx_fifo_re;
reg uart_tx_fifo_readable = 1'd0;
wire uart_tx_fifo_syncfifo_we;
wire uart_tx_fifo_syncfifo_writable;
wire uart_tx_fifo_syncfifo_re;
wire uart_tx_fifo_syncfifo_readable;
wire [9:0] uart_tx_fifo_syncfifo_din;
wire [9:0] uart_tx_fifo_syncfifo_dout;
reg [4:0] uart_tx_fifo_level0 = 5'd0;
reg uart_tx_fifo_replace = 1'd0;
reg [3:0] uart_tx_fifo_produce = 4'd0;
reg [3:0] uart_tx_fifo_consume = 4'd0;
reg [3:0] uart_tx_fifo_wrport_adr = 4'd0;
wire [9:0] uart_tx_fifo_wrport_dat_r;
wire uart_tx_fifo_wrport_we;
wire [9:0] uart_tx_fifo_wrport_dat_w;
wire uart_tx_fifo_do_read;
wire [3:0] uart_tx_fifo_rdport_adr;
wire [9:0] uart_tx_fifo_rdport_dat_r;
wire uart_tx_fifo_rdport_re;
wire [4:0] uart_tx_fifo_level1;
wire [7:0] uart_tx_fifo_fifo_in_payload_data;
wire uart_tx_fifo_fifo_in_first;
wire uart_tx_fifo_fifo_in_last;
wire [7:0] uart_tx_fifo_fifo_out_payload_data;
wire uart_tx_fifo_fifo_out_first;
wire uart_tx_fifo_fifo_out_last;
wire uart_rx_fifo_sink_valid;
wire uart_rx_fifo_sink_ready;
wire uart_rx_fifo_sink_first;
wire uart_rx_fifo_sink_last;
wire [7:0] uart_rx_fifo_sink_payload_data;
wire uart_rx_fifo_source_valid;
wire uart_rx_fifo_source_ready;
wire uart_rx_fifo_source_first;
wire uart_rx_fifo_source_last;
wire [7:0] uart_rx_fifo_source_payload_data;
wire uart_rx_fifo_re;
reg uart_rx_fifo_readable = 1'd0;
wire uart_rx_fifo_syncfifo_we;
wire uart_rx_fifo_syncfifo_writable;
wire uart_rx_fifo_syncfifo_re;
wire uart_rx_fifo_syncfifo_readable;
wire [9:0] uart_rx_fifo_syncfifo_din;
wire [9:0] uart_rx_fifo_syncfifo_dout;
reg [4:0] uart_rx_fifo_level0 = 5'd0;
reg uart_rx_fifo_replace = 1'd0;
reg [3:0] uart_rx_fifo_produce = 4'd0;
reg [3:0] uart_rx_fifo_consume = 4'd0;
reg [3:0] uart_rx_fifo_wrport_adr = 4'd0;
wire [9:0] uart_rx_fifo_wrport_dat_r;
wire uart_rx_fifo_wrport_we;
wire [9:0] uart_rx_fifo_wrport_dat_w;
wire uart_rx_fifo_do_read;
wire [3:0] uart_rx_fifo_rdport_adr;
wire [9:0] uart_rx_fifo_rdport_dat_r;
wire uart_rx_fifo_rdport_re;
wire [4:0] uart_rx_fifo_level1;
wire [7:0] uart_rx_fifo_fifo_in_payload_data;
wire uart_rx_fifo_fifo_in_first;
wire uart_rx_fifo_fifo_in_last;
wire [7:0] uart_rx_fifo_fifo_out_payload_data;
wire uart_rx_fifo_fifo_out_first;
wire uart_rx_fifo_fifo_out_last;
reg reset = 1'd0;
reg wishbone2csr_state = 1'd0;
reg wishbone2csr_next_state = 1'd0;
wire status_re;
wire [4:0] status_r;
wire status_we;
reg [4:0] status_w = 5'd0;
wire pending_re;
wire [4:0] pending_r;
wire pending_we;
reg [4:0] pending_w = 5'd0;
reg [4:0] storage = 5'd0;
reg re = 1'd0;
reg [2:0] lcd_i80_state = 3'd0;
reg [2:0] lcd_i80_next_state = 3'd0;
reg rs_next_value0 = 1'd0;
reg rs_next_value_ce0 = 1'd0;
reg rd_next_value1 = 1'd0;
reg rd_next_value_ce1 = 1'd0;
reg wr_next_value2 = 1'd0;
reg wr_next_value_ce2 = 1'd0;
reg [7:0] db_next_value3 = 8'd0;
reg db_next_value_ce3 = 1'd0;
reg busy_next_value4 = 1'd0;
reg busy_next_value_ce4 = 1'd0;
reg [3:0] count2_next_value5 = 4'd0;
reg count2_next_value_ce5 = 1'd0;
reg rst_next_value6 = 1'd0;
reg rst_next_value_ce6 = 1'd0;
reg [3:0] manage_next_value7 = 4'd0;
reg manage_next_value_ce7 = 1'd0;
reg [2:0] manage_ant_next_value8 = 3'd0;
reg manage_ant_next_value_ce8 = 1'd0;
reg [3:0] countwr_next_value9 = 4'd0;
reg countwr_next_value_ce9 = 1'd0;
wire [29:0] shared_adr;
wire [31:0] shared_dat_w;
reg [31:0] shared_dat_r = 32'd0;
wire [3:0] shared_sel;
wire shared_cyc;
wire shared_stb;
reg shared_ack = 1'd0;
wire shared_we;
wire [2:0] shared_cti;
wire [1:0] shared_bte;
wire shared_err;
wire [1:0] request;
reg grant = 1'd0;
reg [3:0] slave_sel = 4'd0;
reg [3:0] slave_sel_r = 4'd0;
reg error = 1'd0;
wire wait_1;
wire done;
reg [19:0] count = 20'd1000000;
wire [13:0] csr_bankarray_interface0_bank_bus_adr;
wire csr_bankarray_interface0_bank_bus_we;
wire [7:0] csr_bankarray_interface0_bank_bus_dat_w;
reg [7:0] csr_bankarray_interface0_bank_bus_dat_r = 8'd0;
wire csr_bankarray_csrbank0_in_re;
wire [4:0] csr_bankarray_csrbank0_in_r;
wire csr_bankarray_csrbank0_in_we;
wire [4:0] csr_bankarray_csrbank0_in_w;
wire csr_bankarray_csrbank0_dir_re;
wire [7:0] csr_bankarray_csrbank0_dir_r;
wire csr_bankarray_csrbank0_dir_we;
wire [7:0] csr_bankarray_csrbank0_dir_w;
wire csr_bankarray_csrbank0_ev_enable0_re;
wire [4:0] csr_bankarray_csrbank0_ev_enable0_r;
wire csr_bankarray_csrbank0_ev_enable0_we;
wire [4:0] csr_bankarray_csrbank0_ev_enable0_w;
wire csr_bankarray_csrbank0_sel;
wire [13:0] csr_bankarray_interface1_bank_bus_adr;
wire csr_bankarray_interface1_bank_bus_we;
wire [7:0] csr_bankarray_interface1_bank_bus_dat_w;
reg [7:0] csr_bankarray_interface1_bank_bus_dat_r = 8'd0;
wire csr_bankarray_csrbank1_reset0_re;
wire csr_bankarray_csrbank1_reset0_r;
wire csr_bankarray_csrbank1_reset0_we;
wire csr_bankarray_csrbank1_reset0_w;
wire csr_bankarray_csrbank1_scratch3_re;
wire [7:0] csr_bankarray_csrbank1_scratch3_r;
wire csr_bankarray_csrbank1_scratch3_we;
wire [7:0] csr_bankarray_csrbank1_scratch3_w;
wire csr_bankarray_csrbank1_scratch2_re;
wire [7:0] csr_bankarray_csrbank1_scratch2_r;
wire csr_bankarray_csrbank1_scratch2_we;
wire [7:0] csr_bankarray_csrbank1_scratch2_w;
wire csr_bankarray_csrbank1_scratch1_re;
wire [7:0] csr_bankarray_csrbank1_scratch1_r;
wire csr_bankarray_csrbank1_scratch1_we;
wire [7:0] csr_bankarray_csrbank1_scratch1_w;
wire csr_bankarray_csrbank1_scratch0_re;
wire [7:0] csr_bankarray_csrbank1_scratch0_r;
wire csr_bankarray_csrbank1_scratch0_we;
wire [7:0] csr_bankarray_csrbank1_scratch0_w;
wire csr_bankarray_csrbank1_bus_errors3_re;
wire [7:0] csr_bankarray_csrbank1_bus_errors3_r;
wire csr_bankarray_csrbank1_bus_errors3_we;
wire [7:0] csr_bankarray_csrbank1_bus_errors3_w;
wire csr_bankarray_csrbank1_bus_errors2_re;
wire [7:0] csr_bankarray_csrbank1_bus_errors2_r;
wire csr_bankarray_csrbank1_bus_errors2_we;
wire [7:0] csr_bankarray_csrbank1_bus_errors2_w;
wire csr_bankarray_csrbank1_bus_errors1_re;
wire [7:0] csr_bankarray_csrbank1_bus_errors1_r;
wire csr_bankarray_csrbank1_bus_errors1_we;
wire [7:0] csr_bankarray_csrbank1_bus_errors1_w;
wire csr_bankarray_csrbank1_bus_errors0_re;
wire [7:0] csr_bankarray_csrbank1_bus_errors0_r;
wire csr_bankarray_csrbank1_bus_errors0_we;
wire [7:0] csr_bankarray_csrbank1_bus_errors0_w;
wire csr_bankarray_csrbank1_sel;
wire [13:0] csr_bankarray_sram_bus_adr;
wire csr_bankarray_sram_bus_we;
wire [7:0] csr_bankarray_sram_bus_dat_w;
reg [7:0] csr_bankarray_sram_bus_dat_r = 8'd0;
wire [5:0] csr_bankarray_adr;
wire [7:0] csr_bankarray_dat_r;
wire csr_bankarray_sel;
reg csr_bankarray_sel_r = 1'd0;
wire [13:0] csr_bankarray_interface2_bank_bus_adr;
wire csr_bankarray_interface2_bank_bus_we;
wire [7:0] csr_bankarray_interface2_bank_bus_dat_w;
reg [7:0] csr_bankarray_interface2_bank_bus_dat_r = 8'd0;
wire csr_bankarray_csrbank2_DATA0_re;
wire [7:0] csr_bankarray_csrbank2_DATA0_r;
wire csr_bankarray_csrbank2_DATA0_we;
wire [7:0] csr_bankarray_csrbank2_DATA0_w;
wire csr_bankarray_csrbank2_ADDR0_re;
wire [7:0] csr_bankarray_csrbank2_ADDR0_r;
wire csr_bankarray_csrbank2_ADDR0_we;
wire [7:0] csr_bankarray_csrbank2_ADDR0_w;
wire csr_bankarray_csrbank2_BUSY_re;
wire csr_bankarray_csrbank2_BUSY_r;
wire csr_bankarray_csrbank2_BUSY_we;
wire csr_bankarray_csrbank2_BUSY_w;
wire csr_bankarray_csrbank2_START0_re;
wire [1:0] csr_bankarray_csrbank2_START0_r;
wire csr_bankarray_csrbank2_START0_we;
wire [1:0] csr_bankarray_csrbank2_START0_w;
wire csr_bankarray_csrbank2_OPTION0_re;
wire csr_bankarray_csrbank2_OPTION0_r;
wire csr_bankarray_csrbank2_OPTION0_we;
wire csr_bankarray_csrbank2_OPTION0_w;
wire csr_bankarray_csrbank2_CS_0_re;
wire csr_bankarray_csrbank2_CS_0_r;
wire csr_bankarray_csrbank2_CS_0_we;
wire csr_bankarray_csrbank2_CS_0_w;
wire csr_bankarray_csrbank2_sel;
wire [13:0] csr_bankarray_interface3_bank_bus_adr;
wire csr_bankarray_interface3_bank_bus_we;
wire [7:0] csr_bankarray_interface3_bank_bus_dat_w;
reg [7:0] csr_bankarray_interface3_bank_bus_dat_r = 8'd0;
wire csr_bankarray_csrbank3_load3_re;
wire [7:0] csr_bankarray_csrbank3_load3_r;
wire csr_bankarray_csrbank3_load3_we;
wire [7:0] csr_bankarray_csrbank3_load3_w;
wire csr_bankarray_csrbank3_load2_re;
wire [7:0] csr_bankarray_csrbank3_load2_r;
wire csr_bankarray_csrbank3_load2_we;
wire [7:0] csr_bankarray_csrbank3_load2_w;
wire csr_bankarray_csrbank3_load1_re;
wire [7:0] csr_bankarray_csrbank3_load1_r;
wire csr_bankarray_csrbank3_load1_we;
wire [7:0] csr_bankarray_csrbank3_load1_w;
wire csr_bankarray_csrbank3_load0_re;
wire [7:0] csr_bankarray_csrbank3_load0_r;
wire csr_bankarray_csrbank3_load0_we;
wire [7:0] csr_bankarray_csrbank3_load0_w;
wire csr_bankarray_csrbank3_reload3_re;
wire [7:0] csr_bankarray_csrbank3_reload3_r;
wire csr_bankarray_csrbank3_reload3_we;
wire [7:0] csr_bankarray_csrbank3_reload3_w;
wire csr_bankarray_csrbank3_reload2_re;
wire [7:0] csr_bankarray_csrbank3_reload2_r;
wire csr_bankarray_csrbank3_reload2_we;
wire [7:0] csr_bankarray_csrbank3_reload2_w;
wire csr_bankarray_csrbank3_reload1_re;
wire [7:0] csr_bankarray_csrbank3_reload1_r;
wire csr_bankarray_csrbank3_reload1_we;
wire [7:0] csr_bankarray_csrbank3_reload1_w;
wire csr_bankarray_csrbank3_reload0_re;
wire [7:0] csr_bankarray_csrbank3_reload0_r;
wire csr_bankarray_csrbank3_reload0_we;
wire [7:0] csr_bankarray_csrbank3_reload0_w;
wire csr_bankarray_csrbank3_en0_re;
wire csr_bankarray_csrbank3_en0_r;
wire csr_bankarray_csrbank3_en0_we;
wire csr_bankarray_csrbank3_en0_w;
wire csr_bankarray_csrbank3_update_value0_re;
wire csr_bankarray_csrbank3_update_value0_r;
wire csr_bankarray_csrbank3_update_value0_we;
wire csr_bankarray_csrbank3_update_value0_w;
wire csr_bankarray_csrbank3_value3_re;
wire [7:0] csr_bankarray_csrbank3_value3_r;
wire csr_bankarray_csrbank3_value3_we;
wire [7:0] csr_bankarray_csrbank3_value3_w;
wire csr_bankarray_csrbank3_value2_re;
wire [7:0] csr_bankarray_csrbank3_value2_r;
wire csr_bankarray_csrbank3_value2_we;
wire [7:0] csr_bankarray_csrbank3_value2_w;
wire csr_bankarray_csrbank3_value1_re;
wire [7:0] csr_bankarray_csrbank3_value1_r;
wire csr_bankarray_csrbank3_value1_we;
wire [7:0] csr_bankarray_csrbank3_value1_w;
wire csr_bankarray_csrbank3_value0_re;
wire [7:0] csr_bankarray_csrbank3_value0_r;
wire csr_bankarray_csrbank3_value0_we;
wire [7:0] csr_bankarray_csrbank3_value0_w;
wire csr_bankarray_csrbank3_ev_enable0_re;
wire csr_bankarray_csrbank3_ev_enable0_r;
wire csr_bankarray_csrbank3_ev_enable0_we;
wire csr_bankarray_csrbank3_ev_enable0_w;
wire csr_bankarray_csrbank3_sel;
wire [13:0] csr_bankarray_interface4_bank_bus_adr;
wire csr_bankarray_interface4_bank_bus_we;
wire [7:0] csr_bankarray_interface4_bank_bus_dat_w;
reg [7:0] csr_bankarray_interface4_bank_bus_dat_r = 8'd0;
wire csr_bankarray_csrbank4_txfull_re;
wire csr_bankarray_csrbank4_txfull_r;
wire csr_bankarray_csrbank4_txfull_we;
wire csr_bankarray_csrbank4_txfull_w;
wire csr_bankarray_csrbank4_rxempty_re;
wire csr_bankarray_csrbank4_rxempty_r;
wire csr_bankarray_csrbank4_rxempty_we;
wire csr_bankarray_csrbank4_rxempty_w;
wire csr_bankarray_csrbank4_ev_enable0_re;
wire [1:0] csr_bankarray_csrbank4_ev_enable0_r;
wire csr_bankarray_csrbank4_ev_enable0_we;
wire [1:0] csr_bankarray_csrbank4_ev_enable0_w;
wire csr_bankarray_csrbank4_sel;
wire [13:0] csr_bankarray_interface5_bank_bus_adr;
wire csr_bankarray_interface5_bank_bus_we;
wire [7:0] csr_bankarray_interface5_bank_bus_dat_w;
reg [7:0] csr_bankarray_interface5_bank_bus_dat_r = 8'd0;
wire csr_bankarray_csrbank5_txfull_re;
wire csr_bankarray_csrbank5_txfull_r;
wire csr_bankarray_csrbank5_txfull_we;
wire csr_bankarray_csrbank5_txfull_w;
wire csr_bankarray_csrbank5_rxempty_re;
wire csr_bankarray_csrbank5_rxempty_r;
wire csr_bankarray_csrbank5_rxempty_we;
wire csr_bankarray_csrbank5_rxempty_w;
wire csr_bankarray_csrbank5_ev_enable0_re;
wire [1:0] csr_bankarray_csrbank5_ev_enable0_r;
wire csr_bankarray_csrbank5_ev_enable0_we;
wire [1:0] csr_bankarray_csrbank5_ev_enable0_w;
wire csr_bankarray_csrbank5_sel;
wire [13:0] csr_bankarray_interface6_bank_bus_adr;
wire csr_bankarray_interface6_bank_bus_we;
wire [7:0] csr_bankarray_interface6_bank_bus_dat_w;
reg [7:0] csr_bankarray_interface6_bank_bus_dat_r = 8'd0;
wire csr_bankarray_csrbank6_tuning_word3_re;
wire [7:0] csr_bankarray_csrbank6_tuning_word3_r;
wire csr_bankarray_csrbank6_tuning_word3_we;
wire [7:0] csr_bankarray_csrbank6_tuning_word3_w;
wire csr_bankarray_csrbank6_tuning_word2_re;
wire [7:0] csr_bankarray_csrbank6_tuning_word2_r;
wire csr_bankarray_csrbank6_tuning_word2_we;
wire [7:0] csr_bankarray_csrbank6_tuning_word2_w;
wire csr_bankarray_csrbank6_tuning_word1_re;
wire [7:0] csr_bankarray_csrbank6_tuning_word1_r;
wire csr_bankarray_csrbank6_tuning_word1_we;
wire [7:0] csr_bankarray_csrbank6_tuning_word1_w;
wire csr_bankarray_csrbank6_tuning_word0_re;
wire [7:0] csr_bankarray_csrbank6_tuning_word0_r;
wire csr_bankarray_csrbank6_tuning_word0_we;
wire [7:0] csr_bankarray_csrbank6_tuning_word0_w;
wire csr_bankarray_csrbank6_sel;
wire [13:0] csr_interconnect_adr;
wire csr_interconnect_we;
wire [7:0] csr_interconnect_dat_w;
wire [7:0] csr_interconnect_dat_r;
wire [4:0] slice_proxy0;
wire [4:0] slice_proxy1;
wire [4:0] slice_proxy2;
wire [4:0] slice_proxy3;
wire [4:0] slice_proxy4;
reg [29:0] array_muxed0 = 30'd0;
reg [31:0] array_muxed1 = 32'd0;
reg [3:0] array_muxed2 = 4'd0;
reg array_muxed3 = 1'd0;
reg array_muxed4 = 1'd0;
reg array_muxed5 = 1'd0;
reg [2:0] array_muxed6 = 3'd0;
reg [1:0] array_muxed7 = 2'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg xilinxmultiregimpl0_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *) reg xilinxmultiregimpl0_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg [4:0] xilinxmultiregimpl1_regs0 = 5'd0;
(* async_reg = "true", dont_touch = "true" *) reg [4:0] xilinxmultiregimpl1_regs1 = 5'd0;
wire xilinxmultiregimpl1;

assign basesoc_cpu_reset = basesoc_soccontroller_reset;
assign db = db_;
assign cs = cs_;
assign rs = rs_;
assign rd = rd_;
assign wr = wr_;
assign rst = rst_;
assign db1 = db_;
assign cs1 = cs_;
assign rs1 = rs_;
assign rd1 = rd_;
assign wr1 = wr_;
assign rst1 = rst_;
assign basesoc_soccontroller_bus_error = error;
always @(*) begin
	basesoc_cpu_interrupt <= 32'd0;
	basesoc_cpu_interrupt[4] <= buttons_irq;
	basesoc_cpu_interrupt[1] <= basesoc_timer_irq;
	basesoc_cpu_interrupt[0] <= basesoc_uart_irq;
end
assign basesoc_soccontroller_reset = basesoc_soccontroller_reset_re;
assign basesoc_soccontroller_bus_errors_status = basesoc_soccontroller_bus_errors;
assign basesoc_basesoc_adr = basesoc_basesoc_ram_bus_adr[12:0];
assign basesoc_basesoc_ram_bus_dat_r = basesoc_basesoc_dat_r;
always @(*) begin
	basesoc_sram0_we <= 4'd0;
	basesoc_sram0_we[0] <= (((basesoc_interface0_ram_bus_cyc & basesoc_interface0_ram_bus_stb) & basesoc_interface0_ram_bus_we) & basesoc_interface0_ram_bus_sel[0]);
	basesoc_sram0_we[1] <= (((basesoc_interface0_ram_bus_cyc & basesoc_interface0_ram_bus_stb) & basesoc_interface0_ram_bus_we) & basesoc_interface0_ram_bus_sel[1]);
	basesoc_sram0_we[2] <= (((basesoc_interface0_ram_bus_cyc & basesoc_interface0_ram_bus_stb) & basesoc_interface0_ram_bus_we) & basesoc_interface0_ram_bus_sel[2]);
	basesoc_sram0_we[3] <= (((basesoc_interface0_ram_bus_cyc & basesoc_interface0_ram_bus_stb) & basesoc_interface0_ram_bus_we) & basesoc_interface0_ram_bus_sel[3]);
end
assign basesoc_sram0_adr = basesoc_interface0_ram_bus_adr[9:0];
assign basesoc_interface0_ram_bus_dat_r = basesoc_sram0_dat_r;
assign basesoc_sram0_dat_w = basesoc_interface0_ram_bus_dat_w;
always @(*) begin
	basesoc_sram1_we <= 4'd0;
	basesoc_sram1_we[0] <= (((basesoc_interface1_ram_bus_cyc & basesoc_interface1_ram_bus_stb) & basesoc_interface1_ram_bus_we) & basesoc_interface1_ram_bus_sel[0]);
	basesoc_sram1_we[1] <= (((basesoc_interface1_ram_bus_cyc & basesoc_interface1_ram_bus_stb) & basesoc_interface1_ram_bus_we) & basesoc_interface1_ram_bus_sel[1]);
	basesoc_sram1_we[2] <= (((basesoc_interface1_ram_bus_cyc & basesoc_interface1_ram_bus_stb) & basesoc_interface1_ram_bus_we) & basesoc_interface1_ram_bus_sel[2]);
	basesoc_sram1_we[3] <= (((basesoc_interface1_ram_bus_cyc & basesoc_interface1_ram_bus_stb) & basesoc_interface1_ram_bus_we) & basesoc_interface1_ram_bus_sel[3]);
end
assign basesoc_sram1_adr = basesoc_interface1_ram_bus_adr[11:0];
assign basesoc_interface1_ram_bus_dat_r = basesoc_sram1_dat_r;
assign basesoc_sram1_dat_w = basesoc_interface1_ram_bus_dat_w;
assign basesoc_uart_uart_sink_valid = basesoc_source_valid;
assign basesoc_source_ready = basesoc_uart_uart_sink_ready;
assign basesoc_uart_uart_sink_first = basesoc_source_first;
assign basesoc_uart_uart_sink_last = basesoc_source_last;
assign basesoc_uart_uart_sink_payload_data = basesoc_source_payload_data;
assign basesoc_sink_valid = basesoc_uart_uart_source_valid;
assign basesoc_uart_uart_source_ready = basesoc_sink_ready;
assign basesoc_sink_first = basesoc_uart_uart_source_first;
assign basesoc_sink_last = basesoc_uart_uart_source_last;
assign basesoc_sink_payload_data = basesoc_uart_uart_source_payload_data;
assign basesoc_uart_tx_fifo_sink_valid = basesoc_uart_rxtx_re;
assign basesoc_uart_tx_fifo_sink_payload_data = basesoc_uart_rxtx_r;
assign basesoc_uart_txfull_status = (~basesoc_uart_tx_fifo_sink_ready);
assign basesoc_uart_uart_source_valid = basesoc_uart_tx_fifo_source_valid;
assign basesoc_uart_tx_fifo_source_ready = basesoc_uart_uart_source_ready;
assign basesoc_uart_uart_source_first = basesoc_uart_tx_fifo_source_first;
assign basesoc_uart_uart_source_last = basesoc_uart_tx_fifo_source_last;
assign basesoc_uart_uart_source_payload_data = basesoc_uart_tx_fifo_source_payload_data;
assign basesoc_uart_tx_trigger = (~basesoc_uart_tx_fifo_sink_ready);
assign basesoc_uart_rx_fifo_sink_valid = basesoc_uart_uart_sink_valid;
assign basesoc_uart_uart_sink_ready = basesoc_uart_rx_fifo_sink_ready;
assign basesoc_uart_rx_fifo_sink_first = basesoc_uart_uart_sink_first;
assign basesoc_uart_rx_fifo_sink_last = basesoc_uart_uart_sink_last;
assign basesoc_uart_rx_fifo_sink_payload_data = basesoc_uart_uart_sink_payload_data;
assign basesoc_uart_rxempty_status = (~basesoc_uart_rx_fifo_source_valid);
assign basesoc_uart_rxtx_w = basesoc_uart_rx_fifo_source_payload_data;
assign basesoc_uart_rx_fifo_source_ready = (basesoc_uart_rx_clear | (1'd0 & basesoc_uart_rxtx_we));
assign basesoc_uart_rx_trigger = (~basesoc_uart_rx_fifo_source_valid);
always @(*) begin
	basesoc_uart_tx_clear <= 1'd0;
	if ((basesoc_uart_eventmanager_pending_re & basesoc_uart_eventmanager_pending_r[0])) begin
		basesoc_uart_tx_clear <= 1'd1;
	end
end
always @(*) begin
	basesoc_uart_eventmanager_status_w <= 2'd0;
	basesoc_uart_eventmanager_status_w[0] <= basesoc_uart_tx_status;
	basesoc_uart_eventmanager_status_w[1] <= basesoc_uart_rx_status;
end
always @(*) begin
	basesoc_uart_rx_clear <= 1'd0;
	if ((basesoc_uart_eventmanager_pending_re & basesoc_uart_eventmanager_pending_r[1])) begin
		basesoc_uart_rx_clear <= 1'd1;
	end
end
always @(*) begin
	basesoc_uart_eventmanager_pending_w <= 2'd0;
	basesoc_uart_eventmanager_pending_w[0] <= basesoc_uart_tx_pending;
	basesoc_uart_eventmanager_pending_w[1] <= basesoc_uart_rx_pending;
end
assign basesoc_uart_irq = ((basesoc_uart_eventmanager_pending_w[0] & basesoc_uart_eventmanager_storage[0]) | (basesoc_uart_eventmanager_pending_w[1] & basesoc_uart_eventmanager_storage[1]));
assign basesoc_uart_tx_status = basesoc_uart_tx_trigger;
assign basesoc_uart_rx_status = basesoc_uart_rx_trigger;
assign basesoc_uart_tx_fifo_syncfifo_din = {basesoc_uart_tx_fifo_fifo_in_last, basesoc_uart_tx_fifo_fifo_in_first, basesoc_uart_tx_fifo_fifo_in_payload_data};
assign {basesoc_uart_tx_fifo_fifo_out_last, basesoc_uart_tx_fifo_fifo_out_first, basesoc_uart_tx_fifo_fifo_out_payload_data} = basesoc_uart_tx_fifo_syncfifo_dout;
assign basesoc_uart_tx_fifo_sink_ready = basesoc_uart_tx_fifo_syncfifo_writable;
assign basesoc_uart_tx_fifo_syncfifo_we = basesoc_uart_tx_fifo_sink_valid;
assign basesoc_uart_tx_fifo_fifo_in_first = basesoc_uart_tx_fifo_sink_first;
assign basesoc_uart_tx_fifo_fifo_in_last = basesoc_uart_tx_fifo_sink_last;
assign basesoc_uart_tx_fifo_fifo_in_payload_data = basesoc_uart_tx_fifo_sink_payload_data;
assign basesoc_uart_tx_fifo_source_valid = basesoc_uart_tx_fifo_readable;
assign basesoc_uart_tx_fifo_source_first = basesoc_uart_tx_fifo_fifo_out_first;
assign basesoc_uart_tx_fifo_source_last = basesoc_uart_tx_fifo_fifo_out_last;
assign basesoc_uart_tx_fifo_source_payload_data = basesoc_uart_tx_fifo_fifo_out_payload_data;
assign basesoc_uart_tx_fifo_re = basesoc_uart_tx_fifo_source_ready;
assign basesoc_uart_tx_fifo_syncfifo_re = (basesoc_uart_tx_fifo_syncfifo_readable & ((~basesoc_uart_tx_fifo_readable) | basesoc_uart_tx_fifo_re));
assign basesoc_uart_tx_fifo_level1 = (basesoc_uart_tx_fifo_level0 + basesoc_uart_tx_fifo_readable);
always @(*) begin
	basesoc_uart_tx_fifo_wrport_adr <= 4'd0;
	if (basesoc_uart_tx_fifo_replace) begin
		basesoc_uart_tx_fifo_wrport_adr <= (basesoc_uart_tx_fifo_produce - 1'd1);
	end else begin
		basesoc_uart_tx_fifo_wrport_adr <= basesoc_uart_tx_fifo_produce;
	end
end
assign basesoc_uart_tx_fifo_wrport_dat_w = basesoc_uart_tx_fifo_syncfifo_din;
assign basesoc_uart_tx_fifo_wrport_we = (basesoc_uart_tx_fifo_syncfifo_we & (basesoc_uart_tx_fifo_syncfifo_writable | basesoc_uart_tx_fifo_replace));
assign basesoc_uart_tx_fifo_do_read = (basesoc_uart_tx_fifo_syncfifo_readable & basesoc_uart_tx_fifo_syncfifo_re);
assign basesoc_uart_tx_fifo_rdport_adr = basesoc_uart_tx_fifo_consume;
assign basesoc_uart_tx_fifo_syncfifo_dout = basesoc_uart_tx_fifo_rdport_dat_r;
assign basesoc_uart_tx_fifo_rdport_re = basesoc_uart_tx_fifo_do_read;
assign basesoc_uart_tx_fifo_syncfifo_writable = (basesoc_uart_tx_fifo_level0 != 5'd16);
assign basesoc_uart_tx_fifo_syncfifo_readable = (basesoc_uart_tx_fifo_level0 != 1'd0);
assign basesoc_uart_rx_fifo_syncfifo_din = {basesoc_uart_rx_fifo_fifo_in_last, basesoc_uart_rx_fifo_fifo_in_first, basesoc_uart_rx_fifo_fifo_in_payload_data};
assign {basesoc_uart_rx_fifo_fifo_out_last, basesoc_uart_rx_fifo_fifo_out_first, basesoc_uart_rx_fifo_fifo_out_payload_data} = basesoc_uart_rx_fifo_syncfifo_dout;
assign basesoc_uart_rx_fifo_sink_ready = basesoc_uart_rx_fifo_syncfifo_writable;
assign basesoc_uart_rx_fifo_syncfifo_we = basesoc_uart_rx_fifo_sink_valid;
assign basesoc_uart_rx_fifo_fifo_in_first = basesoc_uart_rx_fifo_sink_first;
assign basesoc_uart_rx_fifo_fifo_in_last = basesoc_uart_rx_fifo_sink_last;
assign basesoc_uart_rx_fifo_fifo_in_payload_data = basesoc_uart_rx_fifo_sink_payload_data;
assign basesoc_uart_rx_fifo_source_valid = basesoc_uart_rx_fifo_readable;
assign basesoc_uart_rx_fifo_source_first = basesoc_uart_rx_fifo_fifo_out_first;
assign basesoc_uart_rx_fifo_source_last = basesoc_uart_rx_fifo_fifo_out_last;
assign basesoc_uart_rx_fifo_source_payload_data = basesoc_uart_rx_fifo_fifo_out_payload_data;
assign basesoc_uart_rx_fifo_re = basesoc_uart_rx_fifo_source_ready;
assign basesoc_uart_rx_fifo_syncfifo_re = (basesoc_uart_rx_fifo_syncfifo_readable & ((~basesoc_uart_rx_fifo_readable) | basesoc_uart_rx_fifo_re));
assign basesoc_uart_rx_fifo_level1 = (basesoc_uart_rx_fifo_level0 + basesoc_uart_rx_fifo_readable);
always @(*) begin
	basesoc_uart_rx_fifo_wrport_adr <= 4'd0;
	if (basesoc_uart_rx_fifo_replace) begin
		basesoc_uart_rx_fifo_wrport_adr <= (basesoc_uart_rx_fifo_produce - 1'd1);
	end else begin
		basesoc_uart_rx_fifo_wrport_adr <= basesoc_uart_rx_fifo_produce;
	end
end
assign basesoc_uart_rx_fifo_wrport_dat_w = basesoc_uart_rx_fifo_syncfifo_din;
assign basesoc_uart_rx_fifo_wrport_we = (basesoc_uart_rx_fifo_syncfifo_we & (basesoc_uart_rx_fifo_syncfifo_writable | basesoc_uart_rx_fifo_replace));
assign basesoc_uart_rx_fifo_do_read = (basesoc_uart_rx_fifo_syncfifo_readable & basesoc_uart_rx_fifo_syncfifo_re);
assign basesoc_uart_rx_fifo_rdport_adr = basesoc_uart_rx_fifo_consume;
assign basesoc_uart_rx_fifo_syncfifo_dout = basesoc_uart_rx_fifo_rdport_dat_r;
assign basesoc_uart_rx_fifo_rdport_re = basesoc_uart_rx_fifo_do_read;
assign basesoc_uart_rx_fifo_syncfifo_writable = (basesoc_uart_rx_fifo_level0 != 5'd16);
assign basesoc_uart_rx_fifo_syncfifo_readable = (basesoc_uart_rx_fifo_level0 != 1'd0);
assign basesoc_timer_zero_trigger = (basesoc_timer_value != 1'd0);
assign basesoc_timer_eventmanager_status_w = basesoc_timer_zero_status;
always @(*) begin
	basesoc_timer_zero_clear <= 1'd0;
	if ((basesoc_timer_eventmanager_pending_re & basesoc_timer_eventmanager_pending_r)) begin
		basesoc_timer_zero_clear <= 1'd1;
	end
end
assign basesoc_timer_eventmanager_pending_w = basesoc_timer_zero_pending;
assign basesoc_timer_irq = (basesoc_timer_eventmanager_pending_w & basesoc_timer_eventmanager_storage);
assign basesoc_timer_zero_status = basesoc_timer_zero_trigger;
assign basesoc_interface_dat_w = basesoc_wishbone_dat_w;
assign basesoc_wishbone_dat_r = basesoc_interface_dat_r;
always @(*) begin
	wishbone2csr_next_state <= 1'd0;
	basesoc_interface_adr <= 14'd0;
	basesoc_interface_we <= 1'd0;
	basesoc_wishbone_ack <= 1'd0;
	wishbone2csr_next_state <= wishbone2csr_state;
	case (wishbone2csr_state)
		1'd1: begin
			basesoc_wishbone_ack <= 1'd1;
			wishbone2csr_next_state <= 1'd0;
		end
		default: begin
			if ((basesoc_wishbone_cyc & basesoc_wishbone_stb)) begin
				basesoc_interface_adr <= basesoc_wishbone_adr;
				basesoc_interface_we <= (basesoc_wishbone_we & (basesoc_wishbone_sel != 1'd0));
				wishbone2csr_next_state <= 1'd1;
			end
		end
	endcase
end
assign sys_clk = clk100;
assign por_clk = clk100;
assign sys_rst = int_rst;
assign buttons_arriba_trigger = (~slice_proxy0[1]);
assign buttons_abajo_trigger = (~slice_proxy1[0]);
assign buttons_derecha_trigger = (~slice_proxy2[2]);
assign buttons_izquierda_trigger = (~slice_proxy3[3]);
assign buttons_pause_trigger = (~slice_proxy4[4]);
always @(*) begin
	buttons_arriba_clear <= 1'd0;
	if ((pending_re & pending_r[0])) begin
		buttons_arriba_clear <= 1'd1;
	end
end
always @(*) begin
	buttons_abajo_clear <= 1'd0;
	if ((pending_re & pending_r[1])) begin
		buttons_abajo_clear <= 1'd1;
	end
end
always @(*) begin
	buttons_derecha_clear <= 1'd0;
	if ((pending_re & pending_r[2])) begin
		buttons_derecha_clear <= 1'd1;
	end
end
always @(*) begin
	buttons_izquierda_clear <= 1'd0;
	if ((pending_re & pending_r[3])) begin
		buttons_izquierda_clear <= 1'd1;
	end
end
always @(*) begin
	status_w <= 5'd0;
	status_w[0] <= buttons_arriba_status;
	status_w[1] <= buttons_abajo_status;
	status_w[2] <= buttons_derecha_status;
	status_w[3] <= buttons_izquierda_status;
	status_w[4] <= buttons_pause_status;
end
always @(*) begin
	buttons_pause_clear <= 1'd0;
	if ((pending_re & pending_r[4])) begin
		buttons_pause_clear <= 1'd1;
	end
end
always @(*) begin
	pending_w <= 5'd0;
	pending_w[0] <= buttons_arriba_pending;
	pending_w[1] <= buttons_abajo_pending;
	pending_w[2] <= buttons_derecha_pending;
	pending_w[3] <= buttons_izquierda_pending;
	pending_w[4] <= buttons_pause_pending;
end
assign buttons_irq = (((((pending_w[0] & storage[0]) | (pending_w[1] & storage[1])) | (pending_w[2] & storage[2])) | (pending_w[3] & storage[3])) | (pending_w[4] & storage[4]));
assign buttons_arriba_status = buttons_arriba_trigger;
assign buttons_abajo_status = buttons_abajo_trigger;
assign buttons_derecha_status = buttons_derecha_trigger;
assign buttons_izquierda_status = buttons_izquierda_trigger;
assign buttons_pause_status = buttons_pause_trigger;
assign data = DATA_storage;
assign option = OPTION_storage;
assign addr = ADDR_storage;
assign status = busy;
assign start = START_storage;
assign db_ = db_1;
assign cs_ = CS__storage;
assign rs_ = rs_1;
assign rd_ = rd_1;
assign wr_ = wr_1;
assign rst_ = rst_1;
always @(*) begin
	rst_next_value6 <= 1'd0;
	rst_next_value_ce6 <= 1'd0;
	manage_next_value7 <= 4'd0;
	manage_next_value_ce7 <= 1'd0;
	manage_ant_next_value8 <= 3'd0;
	manage_ant_next_value_ce8 <= 1'd0;
	lcd_i80_next_state <= 3'd0;
	rs_next_value0 <= 1'd0;
	rs_next_value_ce0 <= 1'd0;
	rd_next_value1 <= 1'd0;
	countwr_next_value9 <= 4'd0;
	rd_next_value_ce1 <= 1'd0;
	countwr_next_value_ce9 <= 1'd0;
	wr_next_value2 <= 1'd0;
	wr_next_value_ce2 <= 1'd0;
	db_next_value3 <= 8'd0;
	db_next_value_ce3 <= 1'd0;
	busy_next_value4 <= 1'd0;
	busy_next_value_ce4 <= 1'd0;
	count2_next_value5 <= 4'd0;
	count2_next_value_ce5 <= 1'd0;
	lcd_i80_next_state <= lcd_i80_state;
	case (lcd_i80_state)
		1'd1: begin
			rs_next_value0 <= 1'd0;
			rs_next_value_ce0 <= 1'd1;
			db_next_value3 <= addr;
			db_next_value_ce3 <= 1'd1;
			busy_next_value4 <= 1'd1;
			busy_next_value_ce4 <= 1'd1;
			manage_next_value7 <= 1'd1;
			manage_next_value_ce7 <= 1'd1;
			manage_ant_next_value8 <= 1'd1;
			manage_ant_next_value_ce8 <= 1'd1;
			count2_next_value5 <= 1'd0;
			count2_next_value_ce5 <= 1'd1;
			lcd_i80_next_state <= 3'd4;
		end
		2'd2: begin
			busy_next_value4 <= 1'd1;
			busy_next_value_ce4 <= 1'd1;
			wr_next_value2 <= (~wr_1);
			wr_next_value_ce2 <= 1'd1;
			manage_next_value7 <= 2'd2;
			manage_next_value_ce7 <= 1'd1;
			countwr_next_value9 <= 1'd0;
			countwr_next_value_ce9 <= 1'd1;
			count2_next_value5 <= 1'd0;
			count2_next_value_ce5 <= 1'd1;
			if ((wr_1 == 1'd1)) begin
				lcd_i80_next_state <= 3'd6;
			end
			if ((wr_1 == 1'd0)) begin
				lcd_i80_next_state <= 3'd4;
			end
		end
		2'd3: begin
			busy_next_value4 <= 1'd1;
			busy_next_value_ce4 <= 1'd1;
			rs_next_value0 <= 1'd1;
			rs_next_value_ce0 <= 1'd1;
			db_next_value3 <= data;
			db_next_value_ce3 <= 1'd1;
			manage_next_value7 <= 2'd3;
			manage_next_value_ce7 <= 1'd1;
			manage_ant_next_value8 <= 2'd3;
			manage_ant_next_value_ce8 <= 1'd1;
			count2_next_value5 <= 1'd0;
			count2_next_value_ce5 <= 1'd1;
			lcd_i80_next_state <= 3'd4;
		end
		3'd4: begin
			count2_next_value5 <= (count2 + 1'd1);
			count2_next_value_ce5 <= 1'd1;
			if ((count2 < 4'd15)) begin
				lcd_i80_next_state <= 3'd4;
			end
			if ((count2 >= 4'd15)) begin
				if ((manage == 1'd0)) begin
					if ((option == 1'd1)) begin
						lcd_i80_next_state <= 2'd3;
					end
					if ((option == 1'd0)) begin
						lcd_i80_next_state <= 1'd1;
					end
				end
				if ((manage == 1'd1)) begin
					lcd_i80_next_state <= 2'd2;
				end
				if ((manage == 2'd2)) begin
					if ((manage_ant == 1'd1)) begin
						if ((option == 1'd1)) begin
							lcd_i80_next_state <= 2'd3;
						end
						if ((option == 1'd0)) begin
							lcd_i80_next_state <= 1'd0;
						end
					end
					if ((manage_ant == 2'd3)) begin
						lcd_i80_next_state <= 1'd0;
					end
					if ((manage_ant == 3'd4)) begin
						lcd_i80_next_state <= 3'd5;
					end
				end
				if ((manage == 2'd3)) begin
					lcd_i80_next_state <= 2'd2;
				end
				if ((manage == 3'd4)) begin
					lcd_i80_next_state <= 2'd2;
				end
				if ((manage == 3'd5)) begin
					lcd_i80_next_state <= 2'd2;
				end
			end
		end
		3'd5: begin
			countwr_next_value9 <= (countwr + 1'd1);
			countwr_next_value_ce9 <= 1'd1;
			if ((countwr < 3'd5)) begin
				lcd_i80_next_state <= 3'd5;
			end
			if ((countwr >= 3'd5)) begin
				lcd_i80_next_state <= 1'd0;
			end
		end
		3'd6: begin
			countwr_next_value9 <= (countwr + 1'd1);
			countwr_next_value_ce9 <= 1'd1;
			if ((countwr < 4'd15)) begin
				lcd_i80_next_state <= 3'd6;
			end
			if ((countwr >= 4'd15)) begin
				lcd_i80_next_state <= 2'd2;
			end
		end
		default: begin
			rs_next_value0 <= 1'd1;
			rs_next_value_ce0 <= 1'd1;
			rd_next_value1 <= 1'd1;
			rd_next_value_ce1 <= 1'd1;
			wr_next_value2 <= 1'd1;
			wr_next_value_ce2 <= 1'd1;
			db_next_value3 <= 1'd0;
			db_next_value_ce3 <= 1'd1;
			busy_next_value4 <= 1'd0;
			busy_next_value_ce4 <= 1'd1;
			count2_next_value5 <= 1'd0;
			count2_next_value_ce5 <= 1'd1;
			rst_next_value6 <= 1'd1;
			rst_next_value_ce6 <= 1'd1;
			manage_next_value7 <= 1'd0;
			manage_next_value_ce7 <= 1'd1;
			if ((start == 1'd1)) begin
				lcd_i80_next_state <= 3'd4;
			end
		end
	endcase
end
assign uart_uart_sink_valid = rs232phy_source_valid;
assign rs232phy_source_ready = uart_uart_sink_ready;
assign uart_uart_sink_first = rs232phy_source_first;
assign uart_uart_sink_last = rs232phy_source_last;
assign uart_uart_sink_payload_data = rs232phy_source_payload_data;
assign rs232phy_sink_valid = uart_uart_source_valid;
assign uart_uart_source_ready = rs232phy_sink_ready;
assign rs232phy_sink_first = uart_uart_source_first;
assign rs232phy_sink_last = uart_uart_source_last;
assign rs232phy_sink_payload_data = uart_uart_source_payload_data;
assign uart_tx_fifo_sink_valid = uart_rxtx_re;
assign uart_tx_fifo_sink_payload_data = uart_rxtx_r;
assign uart_txfull_status = (~uart_tx_fifo_sink_ready);
assign uart_uart_source_valid = uart_tx_fifo_source_valid;
assign uart_tx_fifo_source_ready = uart_uart_source_ready;
assign uart_uart_source_first = uart_tx_fifo_source_first;
assign uart_uart_source_last = uart_tx_fifo_source_last;
assign uart_uart_source_payload_data = uart_tx_fifo_source_payload_data;
assign uart_tx_trigger = (~uart_tx_fifo_sink_ready);
assign uart_rx_fifo_sink_valid = uart_uart_sink_valid;
assign uart_uart_sink_ready = uart_rx_fifo_sink_ready;
assign uart_rx_fifo_sink_first = uart_uart_sink_first;
assign uart_rx_fifo_sink_last = uart_uart_sink_last;
assign uart_rx_fifo_sink_payload_data = uart_uart_sink_payload_data;
assign uart_rxempty_status = (~uart_rx_fifo_source_valid);
assign uart_rxtx_w = uart_rx_fifo_source_payload_data;
assign uart_rx_fifo_source_ready = (uart_rx_clear | (1'd0 & uart_rxtx_we));
assign uart_rx_trigger = (~uart_rx_fifo_source_valid);
always @(*) begin
	uart_tx_clear <= 1'd0;
	if ((uart_eventmanager_pending_re & uart_eventmanager_pending_r[0])) begin
		uart_tx_clear <= 1'd1;
	end
end
always @(*) begin
	uart_eventmanager_status_w <= 2'd0;
	uart_eventmanager_status_w[0] <= uart_tx_status;
	uart_eventmanager_status_w[1] <= uart_rx_status;
end
always @(*) begin
	uart_rx_clear <= 1'd0;
	if ((uart_eventmanager_pending_re & uart_eventmanager_pending_r[1])) begin
		uart_rx_clear <= 1'd1;
	end
end
always @(*) begin
	uart_eventmanager_pending_w <= 2'd0;
	uart_eventmanager_pending_w[0] <= uart_tx_pending;
	uart_eventmanager_pending_w[1] <= uart_rx_pending;
end
assign uart_irq = ((uart_eventmanager_pending_w[0] & uart_eventmanager_storage[0]) | (uart_eventmanager_pending_w[1] & uart_eventmanager_storage[1]));
assign uart_tx_status = uart_tx_trigger;
assign uart_rx_status = uart_rx_trigger;
assign uart_tx_fifo_syncfifo_din = {uart_tx_fifo_fifo_in_last, uart_tx_fifo_fifo_in_first, uart_tx_fifo_fifo_in_payload_data};
assign {uart_tx_fifo_fifo_out_last, uart_tx_fifo_fifo_out_first, uart_tx_fifo_fifo_out_payload_data} = uart_tx_fifo_syncfifo_dout;
assign uart_tx_fifo_sink_ready = uart_tx_fifo_syncfifo_writable;
assign uart_tx_fifo_syncfifo_we = uart_tx_fifo_sink_valid;
assign uart_tx_fifo_fifo_in_first = uart_tx_fifo_sink_first;
assign uart_tx_fifo_fifo_in_last = uart_tx_fifo_sink_last;
assign uart_tx_fifo_fifo_in_payload_data = uart_tx_fifo_sink_payload_data;
assign uart_tx_fifo_source_valid = uart_tx_fifo_readable;
assign uart_tx_fifo_source_first = uart_tx_fifo_fifo_out_first;
assign uart_tx_fifo_source_last = uart_tx_fifo_fifo_out_last;
assign uart_tx_fifo_source_payload_data = uart_tx_fifo_fifo_out_payload_data;
assign uart_tx_fifo_re = uart_tx_fifo_source_ready;
assign uart_tx_fifo_syncfifo_re = (uart_tx_fifo_syncfifo_readable & ((~uart_tx_fifo_readable) | uart_tx_fifo_re));
assign uart_tx_fifo_level1 = (uart_tx_fifo_level0 + uart_tx_fifo_readable);
always @(*) begin
	uart_tx_fifo_wrport_adr <= 4'd0;
	if (uart_tx_fifo_replace) begin
		uart_tx_fifo_wrport_adr <= (uart_tx_fifo_produce - 1'd1);
	end else begin
		uart_tx_fifo_wrport_adr <= uart_tx_fifo_produce;
	end
end
assign uart_tx_fifo_wrport_dat_w = uart_tx_fifo_syncfifo_din;
assign uart_tx_fifo_wrport_we = (uart_tx_fifo_syncfifo_we & (uart_tx_fifo_syncfifo_writable | uart_tx_fifo_replace));
assign uart_tx_fifo_do_read = (uart_tx_fifo_syncfifo_readable & uart_tx_fifo_syncfifo_re);
assign uart_tx_fifo_rdport_adr = uart_tx_fifo_consume;
assign uart_tx_fifo_syncfifo_dout = uart_tx_fifo_rdport_dat_r;
assign uart_tx_fifo_rdport_re = uart_tx_fifo_do_read;
assign uart_tx_fifo_syncfifo_writable = (uart_tx_fifo_level0 != 5'd16);
assign uart_tx_fifo_syncfifo_readable = (uart_tx_fifo_level0 != 1'd0);
assign uart_rx_fifo_syncfifo_din = {uart_rx_fifo_fifo_in_last, uart_rx_fifo_fifo_in_first, uart_rx_fifo_fifo_in_payload_data};
assign {uart_rx_fifo_fifo_out_last, uart_rx_fifo_fifo_out_first, uart_rx_fifo_fifo_out_payload_data} = uart_rx_fifo_syncfifo_dout;
assign uart_rx_fifo_sink_ready = uart_rx_fifo_syncfifo_writable;
assign uart_rx_fifo_syncfifo_we = uart_rx_fifo_sink_valid;
assign uart_rx_fifo_fifo_in_first = uart_rx_fifo_sink_first;
assign uart_rx_fifo_fifo_in_last = uart_rx_fifo_sink_last;
assign uart_rx_fifo_fifo_in_payload_data = uart_rx_fifo_sink_payload_data;
assign uart_rx_fifo_source_valid = uart_rx_fifo_readable;
assign uart_rx_fifo_source_first = uart_rx_fifo_fifo_out_first;
assign uart_rx_fifo_source_last = uart_rx_fifo_fifo_out_last;
assign uart_rx_fifo_source_payload_data = uart_rx_fifo_fifo_out_payload_data;
assign uart_rx_fifo_re = uart_rx_fifo_source_ready;
assign uart_rx_fifo_syncfifo_re = (uart_rx_fifo_syncfifo_readable & ((~uart_rx_fifo_readable) | uart_rx_fifo_re));
assign uart_rx_fifo_level1 = (uart_rx_fifo_level0 + uart_rx_fifo_readable);
always @(*) begin
	uart_rx_fifo_wrport_adr <= 4'd0;
	if (uart_rx_fifo_replace) begin
		uart_rx_fifo_wrport_adr <= (uart_rx_fifo_produce - 1'd1);
	end else begin
		uart_rx_fifo_wrport_adr <= uart_rx_fifo_produce;
	end
end
assign uart_rx_fifo_wrport_dat_w = uart_rx_fifo_syncfifo_din;
assign uart_rx_fifo_wrport_we = (uart_rx_fifo_syncfifo_we & (uart_rx_fifo_syncfifo_writable | uart_rx_fifo_replace));
assign uart_rx_fifo_do_read = (uart_rx_fifo_syncfifo_readable & uart_rx_fifo_syncfifo_re);
assign uart_rx_fifo_rdport_adr = uart_rx_fifo_consume;
assign uart_rx_fifo_syncfifo_dout = uart_rx_fifo_rdport_dat_r;
assign uart_rx_fifo_rdport_re = uart_rx_fifo_do_read;
assign uart_rx_fifo_syncfifo_writable = (uart_rx_fifo_level0 != 5'd16);
assign uart_rx_fifo_syncfifo_readable = (uart_rx_fifo_level0 != 1'd0);
assign shared_adr = array_muxed0;
assign shared_dat_w = array_muxed1;
assign shared_sel = array_muxed2;
assign shared_cyc = array_muxed3;
assign shared_stb = array_muxed4;
assign shared_we = array_muxed5;
assign shared_cti = array_muxed6;
assign shared_bte = array_muxed7;
assign basesoc_cpu_ibus_dat_r = shared_dat_r;
assign basesoc_cpu_dbus_dat_r = shared_dat_r;
assign basesoc_cpu_ibus_ack = (shared_ack & (grant == 1'd0));
assign basesoc_cpu_dbus_ack = (shared_ack & (grant == 1'd1));
assign basesoc_cpu_ibus_err = (shared_err & (grant == 1'd0));
assign basesoc_cpu_dbus_err = (shared_err & (grant == 1'd1));
assign request = {basesoc_cpu_dbus_cyc, basesoc_cpu_ibus_cyc};
always @(*) begin
	slave_sel <= 4'd0;
	slave_sel[0] <= (shared_adr[29:13] == 1'd0);
	slave_sel[1] <= (shared_adr[29:10] == 13'd4096);
	slave_sel[2] <= (shared_adr[29:12] == 17'd65536);
	slave_sel[3] <= (shared_adr[29:14] == 16'd33280);
end
assign basesoc_basesoc_ram_bus_adr = shared_adr;
assign basesoc_basesoc_ram_bus_dat_w = shared_dat_w;
assign basesoc_basesoc_ram_bus_sel = shared_sel;
assign basesoc_basesoc_ram_bus_stb = shared_stb;
assign basesoc_basesoc_ram_bus_we = shared_we;
assign basesoc_basesoc_ram_bus_cti = shared_cti;
assign basesoc_basesoc_ram_bus_bte = shared_bte;
assign basesoc_interface0_ram_bus_adr = shared_adr;
assign basesoc_interface0_ram_bus_dat_w = shared_dat_w;
assign basesoc_interface0_ram_bus_sel = shared_sel;
assign basesoc_interface0_ram_bus_stb = shared_stb;
assign basesoc_interface0_ram_bus_we = shared_we;
assign basesoc_interface0_ram_bus_cti = shared_cti;
assign basesoc_interface0_ram_bus_bte = shared_bte;
assign basesoc_interface1_ram_bus_adr = shared_adr;
assign basesoc_interface1_ram_bus_dat_w = shared_dat_w;
assign basesoc_interface1_ram_bus_sel = shared_sel;
assign basesoc_interface1_ram_bus_stb = shared_stb;
assign basesoc_interface1_ram_bus_we = shared_we;
assign basesoc_interface1_ram_bus_cti = shared_cti;
assign basesoc_interface1_ram_bus_bte = shared_bte;
assign basesoc_wishbone_adr = shared_adr;
assign basesoc_wishbone_dat_w = shared_dat_w;
assign basesoc_wishbone_sel = shared_sel;
assign basesoc_wishbone_stb = shared_stb;
assign basesoc_wishbone_we = shared_we;
assign basesoc_wishbone_cti = shared_cti;
assign basesoc_wishbone_bte = shared_bte;
assign basesoc_basesoc_ram_bus_cyc = (shared_cyc & slave_sel[0]);
assign basesoc_interface0_ram_bus_cyc = (shared_cyc & slave_sel[1]);
assign basesoc_interface1_ram_bus_cyc = (shared_cyc & slave_sel[2]);
assign basesoc_wishbone_cyc = (shared_cyc & slave_sel[3]);
assign shared_err = (((basesoc_basesoc_ram_bus_err | basesoc_interface0_ram_bus_err) | basesoc_interface1_ram_bus_err) | basesoc_wishbone_err);
assign wait_1 = ((shared_stb & shared_cyc) & (~shared_ack));
always @(*) begin
	shared_ack <= 1'd0;
	error <= 1'd0;
	shared_dat_r <= 32'd0;
	shared_ack <= (((basesoc_basesoc_ram_bus_ack | basesoc_interface0_ram_bus_ack) | basesoc_interface1_ram_bus_ack) | basesoc_wishbone_ack);
	shared_dat_r <= (((({32{slave_sel_r[0]}} & basesoc_basesoc_ram_bus_dat_r) | ({32{slave_sel_r[1]}} & basesoc_interface0_ram_bus_dat_r)) | ({32{slave_sel_r[2]}} & basesoc_interface1_ram_bus_dat_r)) | ({32{slave_sel_r[3]}} & basesoc_wishbone_dat_r));
	if (done) begin
		shared_dat_r <= 32'd4294967295;
		shared_ack <= 1'd1;
		error <= 1'd1;
	end
end
assign done = (count == 1'd0);
assign csr_bankarray_csrbank0_sel = (csr_bankarray_interface0_bank_bus_adr[13:9] == 3'd6);
assign csr_bankarray_csrbank0_in_r = csr_bankarray_interface0_bank_bus_dat_w[4:0];
assign csr_bankarray_csrbank0_in_re = ((csr_bankarray_csrbank0_sel & csr_bankarray_interface0_bank_bus_we) & (csr_bankarray_interface0_bank_bus_adr[2:0] == 1'd0));
assign csr_bankarray_csrbank0_in_we = ((csr_bankarray_csrbank0_sel & (~csr_bankarray_interface0_bank_bus_we)) & (csr_bankarray_interface0_bank_bus_adr[2:0] == 1'd0));
assign csr_bankarray_csrbank0_dir_r = csr_bankarray_interface0_bank_bus_dat_w[7:0];
assign csr_bankarray_csrbank0_dir_re = ((csr_bankarray_csrbank0_sel & csr_bankarray_interface0_bank_bus_we) & (csr_bankarray_interface0_bank_bus_adr[2:0] == 1'd1));
assign csr_bankarray_csrbank0_dir_we = ((csr_bankarray_csrbank0_sel & (~csr_bankarray_interface0_bank_bus_we)) & (csr_bankarray_interface0_bank_bus_adr[2:0] == 1'd1));
assign status_r = csr_bankarray_interface0_bank_bus_dat_w[4:0];
assign status_re = ((csr_bankarray_csrbank0_sel & csr_bankarray_interface0_bank_bus_we) & (csr_bankarray_interface0_bank_bus_adr[2:0] == 2'd2));
assign status_we = ((csr_bankarray_csrbank0_sel & (~csr_bankarray_interface0_bank_bus_we)) & (csr_bankarray_interface0_bank_bus_adr[2:0] == 2'd2));
assign pending_r = csr_bankarray_interface0_bank_bus_dat_w[4:0];
assign pending_re = ((csr_bankarray_csrbank0_sel & csr_bankarray_interface0_bank_bus_we) & (csr_bankarray_interface0_bank_bus_adr[2:0] == 2'd3));
assign pending_we = ((csr_bankarray_csrbank0_sel & (~csr_bankarray_interface0_bank_bus_we)) & (csr_bankarray_interface0_bank_bus_adr[2:0] == 2'd3));
assign csr_bankarray_csrbank0_ev_enable0_r = csr_bankarray_interface0_bank_bus_dat_w[4:0];
assign csr_bankarray_csrbank0_ev_enable0_re = ((csr_bankarray_csrbank0_sel & csr_bankarray_interface0_bank_bus_we) & (csr_bankarray_interface0_bank_bus_adr[2:0] == 3'd4));
assign csr_bankarray_csrbank0_ev_enable0_we = ((csr_bankarray_csrbank0_sel & (~csr_bankarray_interface0_bank_bus_we)) & (csr_bankarray_interface0_bank_bus_adr[2:0] == 3'd4));
assign csr_bankarray_csrbank0_in_w = buttons_in_status[4:0];
assign buttons_in_we = csr_bankarray_csrbank0_in_we;
assign csr_bankarray_csrbank0_dir_w = buttons_dir_status[7:0];
assign buttons_dir_we = csr_bankarray_csrbank0_dir_we;
assign csr_bankarray_csrbank0_ev_enable0_w = storage[4:0];
assign csr_bankarray_csrbank1_sel = (csr_bankarray_interface1_bank_bus_adr[13:9] == 1'd0);
assign csr_bankarray_csrbank1_reset0_r = csr_bankarray_interface1_bank_bus_dat_w[0];
assign csr_bankarray_csrbank1_reset0_re = ((csr_bankarray_csrbank1_sel & csr_bankarray_interface1_bank_bus_we) & (csr_bankarray_interface1_bank_bus_adr[3:0] == 1'd0));
assign csr_bankarray_csrbank1_reset0_we = ((csr_bankarray_csrbank1_sel & (~csr_bankarray_interface1_bank_bus_we)) & (csr_bankarray_interface1_bank_bus_adr[3:0] == 1'd0));
assign csr_bankarray_csrbank1_scratch3_r = csr_bankarray_interface1_bank_bus_dat_w[7:0];
assign csr_bankarray_csrbank1_scratch3_re = ((csr_bankarray_csrbank1_sel & csr_bankarray_interface1_bank_bus_we) & (csr_bankarray_interface1_bank_bus_adr[3:0] == 1'd1));
assign csr_bankarray_csrbank1_scratch3_we = ((csr_bankarray_csrbank1_sel & (~csr_bankarray_interface1_bank_bus_we)) & (csr_bankarray_interface1_bank_bus_adr[3:0] == 1'd1));
assign csr_bankarray_csrbank1_scratch2_r = csr_bankarray_interface1_bank_bus_dat_w[7:0];
assign csr_bankarray_csrbank1_scratch2_re = ((csr_bankarray_csrbank1_sel & csr_bankarray_interface1_bank_bus_we) & (csr_bankarray_interface1_bank_bus_adr[3:0] == 2'd2));
assign csr_bankarray_csrbank1_scratch2_we = ((csr_bankarray_csrbank1_sel & (~csr_bankarray_interface1_bank_bus_we)) & (csr_bankarray_interface1_bank_bus_adr[3:0] == 2'd2));
assign csr_bankarray_csrbank1_scratch1_r = csr_bankarray_interface1_bank_bus_dat_w[7:0];
assign csr_bankarray_csrbank1_scratch1_re = ((csr_bankarray_csrbank1_sel & csr_bankarray_interface1_bank_bus_we) & (csr_bankarray_interface1_bank_bus_adr[3:0] == 2'd3));
assign csr_bankarray_csrbank1_scratch1_we = ((csr_bankarray_csrbank1_sel & (~csr_bankarray_interface1_bank_bus_we)) & (csr_bankarray_interface1_bank_bus_adr[3:0] == 2'd3));
assign csr_bankarray_csrbank1_scratch0_r = csr_bankarray_interface1_bank_bus_dat_w[7:0];
assign csr_bankarray_csrbank1_scratch0_re = ((csr_bankarray_csrbank1_sel & csr_bankarray_interface1_bank_bus_we) & (csr_bankarray_interface1_bank_bus_adr[3:0] == 3'd4));
assign csr_bankarray_csrbank1_scratch0_we = ((csr_bankarray_csrbank1_sel & (~csr_bankarray_interface1_bank_bus_we)) & (csr_bankarray_interface1_bank_bus_adr[3:0] == 3'd4));
assign csr_bankarray_csrbank1_bus_errors3_r = csr_bankarray_interface1_bank_bus_dat_w[7:0];
assign csr_bankarray_csrbank1_bus_errors3_re = ((csr_bankarray_csrbank1_sel & csr_bankarray_interface1_bank_bus_we) & (csr_bankarray_interface1_bank_bus_adr[3:0] == 3'd5));
assign csr_bankarray_csrbank1_bus_errors3_we = ((csr_bankarray_csrbank1_sel & (~csr_bankarray_interface1_bank_bus_we)) & (csr_bankarray_interface1_bank_bus_adr[3:0] == 3'd5));
assign csr_bankarray_csrbank1_bus_errors2_r = csr_bankarray_interface1_bank_bus_dat_w[7:0];
assign csr_bankarray_csrbank1_bus_errors2_re = ((csr_bankarray_csrbank1_sel & csr_bankarray_interface1_bank_bus_we) & (csr_bankarray_interface1_bank_bus_adr[3:0] == 3'd6));
assign csr_bankarray_csrbank1_bus_errors2_we = ((csr_bankarray_csrbank1_sel & (~csr_bankarray_interface1_bank_bus_we)) & (csr_bankarray_interface1_bank_bus_adr[3:0] == 3'd6));
assign csr_bankarray_csrbank1_bus_errors1_r = csr_bankarray_interface1_bank_bus_dat_w[7:0];
assign csr_bankarray_csrbank1_bus_errors1_re = ((csr_bankarray_csrbank1_sel & csr_bankarray_interface1_bank_bus_we) & (csr_bankarray_interface1_bank_bus_adr[3:0] == 3'd7));
assign csr_bankarray_csrbank1_bus_errors1_we = ((csr_bankarray_csrbank1_sel & (~csr_bankarray_interface1_bank_bus_we)) & (csr_bankarray_interface1_bank_bus_adr[3:0] == 3'd7));
assign csr_bankarray_csrbank1_bus_errors0_r = csr_bankarray_interface1_bank_bus_dat_w[7:0];
assign csr_bankarray_csrbank1_bus_errors0_re = ((csr_bankarray_csrbank1_sel & csr_bankarray_interface1_bank_bus_we) & (csr_bankarray_interface1_bank_bus_adr[3:0] == 4'd8));
assign csr_bankarray_csrbank1_bus_errors0_we = ((csr_bankarray_csrbank1_sel & (~csr_bankarray_interface1_bank_bus_we)) & (csr_bankarray_interface1_bank_bus_adr[3:0] == 4'd8));
assign csr_bankarray_csrbank1_reset0_w = basesoc_soccontroller_reset_storage;
assign csr_bankarray_csrbank1_scratch3_w = basesoc_soccontroller_scratch_storage[31:24];
assign csr_bankarray_csrbank1_scratch2_w = basesoc_soccontroller_scratch_storage[23:16];
assign csr_bankarray_csrbank1_scratch1_w = basesoc_soccontroller_scratch_storage[15:8];
assign csr_bankarray_csrbank1_scratch0_w = basesoc_soccontroller_scratch_storage[7:0];
assign csr_bankarray_csrbank1_bus_errors3_w = basesoc_soccontroller_bus_errors_status[31:24];
assign csr_bankarray_csrbank1_bus_errors2_w = basesoc_soccontroller_bus_errors_status[23:16];
assign csr_bankarray_csrbank1_bus_errors1_w = basesoc_soccontroller_bus_errors_status[15:8];
assign csr_bankarray_csrbank1_bus_errors0_w = basesoc_soccontroller_bus_errors_status[7:0];
assign basesoc_soccontroller_bus_errors_we = csr_bankarray_csrbank1_bus_errors0_we;
assign csr_bankarray_sel = (csr_bankarray_sram_bus_adr[13:9] == 2'd2);
always @(*) begin
	csr_bankarray_sram_bus_dat_r <= 8'd0;
	if (csr_bankarray_sel_r) begin
		csr_bankarray_sram_bus_dat_r <= csr_bankarray_dat_r;
	end
end
assign csr_bankarray_adr = csr_bankarray_sram_bus_adr[5:0];
assign csr_bankarray_csrbank2_sel = (csr_bankarray_interface2_bank_bus_adr[13:9] == 3'd7);
assign csr_bankarray_csrbank2_DATA0_r = csr_bankarray_interface2_bank_bus_dat_w[7:0];
assign csr_bankarray_csrbank2_DATA0_re = ((csr_bankarray_csrbank2_sel & csr_bankarray_interface2_bank_bus_we) & (csr_bankarray_interface2_bank_bus_adr[2:0] == 1'd0));
assign csr_bankarray_csrbank2_DATA0_we = ((csr_bankarray_csrbank2_sel & (~csr_bankarray_interface2_bank_bus_we)) & (csr_bankarray_interface2_bank_bus_adr[2:0] == 1'd0));
assign csr_bankarray_csrbank2_ADDR0_r = csr_bankarray_interface2_bank_bus_dat_w[7:0];
assign csr_bankarray_csrbank2_ADDR0_re = ((csr_bankarray_csrbank2_sel & csr_bankarray_interface2_bank_bus_we) & (csr_bankarray_interface2_bank_bus_adr[2:0] == 1'd1));
assign csr_bankarray_csrbank2_ADDR0_we = ((csr_bankarray_csrbank2_sel & (~csr_bankarray_interface2_bank_bus_we)) & (csr_bankarray_interface2_bank_bus_adr[2:0] == 1'd1));
assign csr_bankarray_csrbank2_BUSY_r = csr_bankarray_interface2_bank_bus_dat_w[0];
assign csr_bankarray_csrbank2_BUSY_re = ((csr_bankarray_csrbank2_sel & csr_bankarray_interface2_bank_bus_we) & (csr_bankarray_interface2_bank_bus_adr[2:0] == 2'd2));
assign csr_bankarray_csrbank2_BUSY_we = ((csr_bankarray_csrbank2_sel & (~csr_bankarray_interface2_bank_bus_we)) & (csr_bankarray_interface2_bank_bus_adr[2:0] == 2'd2));
assign csr_bankarray_csrbank2_START0_r = csr_bankarray_interface2_bank_bus_dat_w[1:0];
assign csr_bankarray_csrbank2_START0_re = ((csr_bankarray_csrbank2_sel & csr_bankarray_interface2_bank_bus_we) & (csr_bankarray_interface2_bank_bus_adr[2:0] == 2'd3));
assign csr_bankarray_csrbank2_START0_we = ((csr_bankarray_csrbank2_sel & (~csr_bankarray_interface2_bank_bus_we)) & (csr_bankarray_interface2_bank_bus_adr[2:0] == 2'd3));
assign csr_bankarray_csrbank2_OPTION0_r = csr_bankarray_interface2_bank_bus_dat_w[0];
assign csr_bankarray_csrbank2_OPTION0_re = ((csr_bankarray_csrbank2_sel & csr_bankarray_interface2_bank_bus_we) & (csr_bankarray_interface2_bank_bus_adr[2:0] == 3'd4));
assign csr_bankarray_csrbank2_OPTION0_we = ((csr_bankarray_csrbank2_sel & (~csr_bankarray_interface2_bank_bus_we)) & (csr_bankarray_interface2_bank_bus_adr[2:0] == 3'd4));
assign csr_bankarray_csrbank2_CS_0_r = csr_bankarray_interface2_bank_bus_dat_w[0];
assign csr_bankarray_csrbank2_CS_0_re = ((csr_bankarray_csrbank2_sel & csr_bankarray_interface2_bank_bus_we) & (csr_bankarray_interface2_bank_bus_adr[2:0] == 3'd5));
assign csr_bankarray_csrbank2_CS_0_we = ((csr_bankarray_csrbank2_sel & (~csr_bankarray_interface2_bank_bus_we)) & (csr_bankarray_interface2_bank_bus_adr[2:0] == 3'd5));
assign csr_bankarray_csrbank2_DATA0_w = DATA_storage[7:0];
assign csr_bankarray_csrbank2_ADDR0_w = ADDR_storage[7:0];
assign csr_bankarray_csrbank2_BUSY_w = status;
assign we = csr_bankarray_csrbank2_BUSY_we;
assign csr_bankarray_csrbank2_START0_w = START_storage[1:0];
assign csr_bankarray_csrbank2_OPTION0_w = OPTION_storage;
assign csr_bankarray_csrbank2_CS_0_w = CS__storage;
assign csr_bankarray_csrbank3_sel = (csr_bankarray_interface3_bank_bus_adr[13:9] == 3'd5);
assign csr_bankarray_csrbank3_load3_r = csr_bankarray_interface3_bank_bus_dat_w[7:0];
assign csr_bankarray_csrbank3_load3_re = ((csr_bankarray_csrbank3_sel & csr_bankarray_interface3_bank_bus_we) & (csr_bankarray_interface3_bank_bus_adr[4:0] == 1'd0));
assign csr_bankarray_csrbank3_load3_we = ((csr_bankarray_csrbank3_sel & (~csr_bankarray_interface3_bank_bus_we)) & (csr_bankarray_interface3_bank_bus_adr[4:0] == 1'd0));
assign csr_bankarray_csrbank3_load2_r = csr_bankarray_interface3_bank_bus_dat_w[7:0];
assign csr_bankarray_csrbank3_load2_re = ((csr_bankarray_csrbank3_sel & csr_bankarray_interface3_bank_bus_we) & (csr_bankarray_interface3_bank_bus_adr[4:0] == 1'd1));
assign csr_bankarray_csrbank3_load2_we = ((csr_bankarray_csrbank3_sel & (~csr_bankarray_interface3_bank_bus_we)) & (csr_bankarray_interface3_bank_bus_adr[4:0] == 1'd1));
assign csr_bankarray_csrbank3_load1_r = csr_bankarray_interface3_bank_bus_dat_w[7:0];
assign csr_bankarray_csrbank3_load1_re = ((csr_bankarray_csrbank3_sel & csr_bankarray_interface3_bank_bus_we) & (csr_bankarray_interface3_bank_bus_adr[4:0] == 2'd2));
assign csr_bankarray_csrbank3_load1_we = ((csr_bankarray_csrbank3_sel & (~csr_bankarray_interface3_bank_bus_we)) & (csr_bankarray_interface3_bank_bus_adr[4:0] == 2'd2));
assign csr_bankarray_csrbank3_load0_r = csr_bankarray_interface3_bank_bus_dat_w[7:0];
assign csr_bankarray_csrbank3_load0_re = ((csr_bankarray_csrbank3_sel & csr_bankarray_interface3_bank_bus_we) & (csr_bankarray_interface3_bank_bus_adr[4:0] == 2'd3));
assign csr_bankarray_csrbank3_load0_we = ((csr_bankarray_csrbank3_sel & (~csr_bankarray_interface3_bank_bus_we)) & (csr_bankarray_interface3_bank_bus_adr[4:0] == 2'd3));
assign csr_bankarray_csrbank3_reload3_r = csr_bankarray_interface3_bank_bus_dat_w[7:0];
assign csr_bankarray_csrbank3_reload3_re = ((csr_bankarray_csrbank3_sel & csr_bankarray_interface3_bank_bus_we) & (csr_bankarray_interface3_bank_bus_adr[4:0] == 3'd4));
assign csr_bankarray_csrbank3_reload3_we = ((csr_bankarray_csrbank3_sel & (~csr_bankarray_interface3_bank_bus_we)) & (csr_bankarray_interface3_bank_bus_adr[4:0] == 3'd4));
assign csr_bankarray_csrbank3_reload2_r = csr_bankarray_interface3_bank_bus_dat_w[7:0];
assign csr_bankarray_csrbank3_reload2_re = ((csr_bankarray_csrbank3_sel & csr_bankarray_interface3_bank_bus_we) & (csr_bankarray_interface3_bank_bus_adr[4:0] == 3'd5));
assign csr_bankarray_csrbank3_reload2_we = ((csr_bankarray_csrbank3_sel & (~csr_bankarray_interface3_bank_bus_we)) & (csr_bankarray_interface3_bank_bus_adr[4:0] == 3'd5));
assign csr_bankarray_csrbank3_reload1_r = csr_bankarray_interface3_bank_bus_dat_w[7:0];
assign csr_bankarray_csrbank3_reload1_re = ((csr_bankarray_csrbank3_sel & csr_bankarray_interface3_bank_bus_we) & (csr_bankarray_interface3_bank_bus_adr[4:0] == 3'd6));
assign csr_bankarray_csrbank3_reload1_we = ((csr_bankarray_csrbank3_sel & (~csr_bankarray_interface3_bank_bus_we)) & (csr_bankarray_interface3_bank_bus_adr[4:0] == 3'd6));
assign csr_bankarray_csrbank3_reload0_r = csr_bankarray_interface3_bank_bus_dat_w[7:0];
assign csr_bankarray_csrbank3_reload0_re = ((csr_bankarray_csrbank3_sel & csr_bankarray_interface3_bank_bus_we) & (csr_bankarray_interface3_bank_bus_adr[4:0] == 3'd7));
assign csr_bankarray_csrbank3_reload0_we = ((csr_bankarray_csrbank3_sel & (~csr_bankarray_interface3_bank_bus_we)) & (csr_bankarray_interface3_bank_bus_adr[4:0] == 3'd7));
assign csr_bankarray_csrbank3_en0_r = csr_bankarray_interface3_bank_bus_dat_w[0];
assign csr_bankarray_csrbank3_en0_re = ((csr_bankarray_csrbank3_sel & csr_bankarray_interface3_bank_bus_we) & (csr_bankarray_interface3_bank_bus_adr[4:0] == 4'd8));
assign csr_bankarray_csrbank3_en0_we = ((csr_bankarray_csrbank3_sel & (~csr_bankarray_interface3_bank_bus_we)) & (csr_bankarray_interface3_bank_bus_adr[4:0] == 4'd8));
assign csr_bankarray_csrbank3_update_value0_r = csr_bankarray_interface3_bank_bus_dat_w[0];
assign csr_bankarray_csrbank3_update_value0_re = ((csr_bankarray_csrbank3_sel & csr_bankarray_interface3_bank_bus_we) & (csr_bankarray_interface3_bank_bus_adr[4:0] == 4'd9));
assign csr_bankarray_csrbank3_update_value0_we = ((csr_bankarray_csrbank3_sel & (~csr_bankarray_interface3_bank_bus_we)) & (csr_bankarray_interface3_bank_bus_adr[4:0] == 4'd9));
assign csr_bankarray_csrbank3_value3_r = csr_bankarray_interface3_bank_bus_dat_w[7:0];
assign csr_bankarray_csrbank3_value3_re = ((csr_bankarray_csrbank3_sel & csr_bankarray_interface3_bank_bus_we) & (csr_bankarray_interface3_bank_bus_adr[4:0] == 4'd10));
assign csr_bankarray_csrbank3_value3_we = ((csr_bankarray_csrbank3_sel & (~csr_bankarray_interface3_bank_bus_we)) & (csr_bankarray_interface3_bank_bus_adr[4:0] == 4'd10));
assign csr_bankarray_csrbank3_value2_r = csr_bankarray_interface3_bank_bus_dat_w[7:0];
assign csr_bankarray_csrbank3_value2_re = ((csr_bankarray_csrbank3_sel & csr_bankarray_interface3_bank_bus_we) & (csr_bankarray_interface3_bank_bus_adr[4:0] == 4'd11));
assign csr_bankarray_csrbank3_value2_we = ((csr_bankarray_csrbank3_sel & (~csr_bankarray_interface3_bank_bus_we)) & (csr_bankarray_interface3_bank_bus_adr[4:0] == 4'd11));
assign csr_bankarray_csrbank3_value1_r = csr_bankarray_interface3_bank_bus_dat_w[7:0];
assign csr_bankarray_csrbank3_value1_re = ((csr_bankarray_csrbank3_sel & csr_bankarray_interface3_bank_bus_we) & (csr_bankarray_interface3_bank_bus_adr[4:0] == 4'd12));
assign csr_bankarray_csrbank3_value1_we = ((csr_bankarray_csrbank3_sel & (~csr_bankarray_interface3_bank_bus_we)) & (csr_bankarray_interface3_bank_bus_adr[4:0] == 4'd12));
assign csr_bankarray_csrbank3_value0_r = csr_bankarray_interface3_bank_bus_dat_w[7:0];
assign csr_bankarray_csrbank3_value0_re = ((csr_bankarray_csrbank3_sel & csr_bankarray_interface3_bank_bus_we) & (csr_bankarray_interface3_bank_bus_adr[4:0] == 4'd13));
assign csr_bankarray_csrbank3_value0_we = ((csr_bankarray_csrbank3_sel & (~csr_bankarray_interface3_bank_bus_we)) & (csr_bankarray_interface3_bank_bus_adr[4:0] == 4'd13));
assign basesoc_timer_eventmanager_status_r = csr_bankarray_interface3_bank_bus_dat_w[0];
assign basesoc_timer_eventmanager_status_re = ((csr_bankarray_csrbank3_sel & csr_bankarray_interface3_bank_bus_we) & (csr_bankarray_interface3_bank_bus_adr[4:0] == 4'd14));
assign basesoc_timer_eventmanager_status_we = ((csr_bankarray_csrbank3_sel & (~csr_bankarray_interface3_bank_bus_we)) & (csr_bankarray_interface3_bank_bus_adr[4:0] == 4'd14));
assign basesoc_timer_eventmanager_pending_r = csr_bankarray_interface3_bank_bus_dat_w[0];
assign basesoc_timer_eventmanager_pending_re = ((csr_bankarray_csrbank3_sel & csr_bankarray_interface3_bank_bus_we) & (csr_bankarray_interface3_bank_bus_adr[4:0] == 4'd15));
assign basesoc_timer_eventmanager_pending_we = ((csr_bankarray_csrbank3_sel & (~csr_bankarray_interface3_bank_bus_we)) & (csr_bankarray_interface3_bank_bus_adr[4:0] == 4'd15));
assign csr_bankarray_csrbank3_ev_enable0_r = csr_bankarray_interface3_bank_bus_dat_w[0];
assign csr_bankarray_csrbank3_ev_enable0_re = ((csr_bankarray_csrbank3_sel & csr_bankarray_interface3_bank_bus_we) & (csr_bankarray_interface3_bank_bus_adr[4:0] == 5'd16));
assign csr_bankarray_csrbank3_ev_enable0_we = ((csr_bankarray_csrbank3_sel & (~csr_bankarray_interface3_bank_bus_we)) & (csr_bankarray_interface3_bank_bus_adr[4:0] == 5'd16));
assign csr_bankarray_csrbank3_load3_w = basesoc_timer_load_storage[31:24];
assign csr_bankarray_csrbank3_load2_w = basesoc_timer_load_storage[23:16];
assign csr_bankarray_csrbank3_load1_w = basesoc_timer_load_storage[15:8];
assign csr_bankarray_csrbank3_load0_w = basesoc_timer_load_storage[7:0];
assign csr_bankarray_csrbank3_reload3_w = basesoc_timer_reload_storage[31:24];
assign csr_bankarray_csrbank3_reload2_w = basesoc_timer_reload_storage[23:16];
assign csr_bankarray_csrbank3_reload1_w = basesoc_timer_reload_storage[15:8];
assign csr_bankarray_csrbank3_reload0_w = basesoc_timer_reload_storage[7:0];
assign csr_bankarray_csrbank3_en0_w = basesoc_timer_en_storage;
assign csr_bankarray_csrbank3_update_value0_w = basesoc_timer_update_value_storage;
assign csr_bankarray_csrbank3_value3_w = basesoc_timer_value_status[31:24];
assign csr_bankarray_csrbank3_value2_w = basesoc_timer_value_status[23:16];
assign csr_bankarray_csrbank3_value1_w = basesoc_timer_value_status[15:8];
assign csr_bankarray_csrbank3_value0_w = basesoc_timer_value_status[7:0];
assign basesoc_timer_value_we = csr_bankarray_csrbank3_value0_we;
assign csr_bankarray_csrbank3_ev_enable0_w = basesoc_timer_eventmanager_storage;
assign csr_bankarray_csrbank4_sel = (csr_bankarray_interface4_bank_bus_adr[13:9] == 3'd4);
assign basesoc_uart_rxtx_r = csr_bankarray_interface4_bank_bus_dat_w[7:0];
assign basesoc_uart_rxtx_re = ((csr_bankarray_csrbank4_sel & csr_bankarray_interface4_bank_bus_we) & (csr_bankarray_interface4_bank_bus_adr[2:0] == 1'd0));
assign basesoc_uart_rxtx_we = ((csr_bankarray_csrbank4_sel & (~csr_bankarray_interface4_bank_bus_we)) & (csr_bankarray_interface4_bank_bus_adr[2:0] == 1'd0));
assign csr_bankarray_csrbank4_txfull_r = csr_bankarray_interface4_bank_bus_dat_w[0];
assign csr_bankarray_csrbank4_txfull_re = ((csr_bankarray_csrbank4_sel & csr_bankarray_interface4_bank_bus_we) & (csr_bankarray_interface4_bank_bus_adr[2:0] == 1'd1));
assign csr_bankarray_csrbank4_txfull_we = ((csr_bankarray_csrbank4_sel & (~csr_bankarray_interface4_bank_bus_we)) & (csr_bankarray_interface4_bank_bus_adr[2:0] == 1'd1));
assign csr_bankarray_csrbank4_rxempty_r = csr_bankarray_interface4_bank_bus_dat_w[0];
assign csr_bankarray_csrbank4_rxempty_re = ((csr_bankarray_csrbank4_sel & csr_bankarray_interface4_bank_bus_we) & (csr_bankarray_interface4_bank_bus_adr[2:0] == 2'd2));
assign csr_bankarray_csrbank4_rxempty_we = ((csr_bankarray_csrbank4_sel & (~csr_bankarray_interface4_bank_bus_we)) & (csr_bankarray_interface4_bank_bus_adr[2:0] == 2'd2));
assign basesoc_uart_eventmanager_status_r = csr_bankarray_interface4_bank_bus_dat_w[1:0];
assign basesoc_uart_eventmanager_status_re = ((csr_bankarray_csrbank4_sel & csr_bankarray_interface4_bank_bus_we) & (csr_bankarray_interface4_bank_bus_adr[2:0] == 2'd3));
assign basesoc_uart_eventmanager_status_we = ((csr_bankarray_csrbank4_sel & (~csr_bankarray_interface4_bank_bus_we)) & (csr_bankarray_interface4_bank_bus_adr[2:0] == 2'd3));
assign basesoc_uart_eventmanager_pending_r = csr_bankarray_interface4_bank_bus_dat_w[1:0];
assign basesoc_uart_eventmanager_pending_re = ((csr_bankarray_csrbank4_sel & csr_bankarray_interface4_bank_bus_we) & (csr_bankarray_interface4_bank_bus_adr[2:0] == 3'd4));
assign basesoc_uart_eventmanager_pending_we = ((csr_bankarray_csrbank4_sel & (~csr_bankarray_interface4_bank_bus_we)) & (csr_bankarray_interface4_bank_bus_adr[2:0] == 3'd4));
assign csr_bankarray_csrbank4_ev_enable0_r = csr_bankarray_interface4_bank_bus_dat_w[1:0];
assign csr_bankarray_csrbank4_ev_enable0_re = ((csr_bankarray_csrbank4_sel & csr_bankarray_interface4_bank_bus_we) & (csr_bankarray_interface4_bank_bus_adr[2:0] == 3'd5));
assign csr_bankarray_csrbank4_ev_enable0_we = ((csr_bankarray_csrbank4_sel & (~csr_bankarray_interface4_bank_bus_we)) & (csr_bankarray_interface4_bank_bus_adr[2:0] == 3'd5));
assign csr_bankarray_csrbank4_txfull_w = basesoc_uart_txfull_status;
assign basesoc_uart_txfull_we = csr_bankarray_csrbank4_txfull_we;
assign csr_bankarray_csrbank4_rxempty_w = basesoc_uart_rxempty_status;
assign basesoc_uart_rxempty_we = csr_bankarray_csrbank4_rxempty_we;
assign csr_bankarray_csrbank4_ev_enable0_w = basesoc_uart_eventmanager_storage[1:0];
assign csr_bankarray_csrbank5_sel = (csr_bankarray_interface5_bank_bus_adr[13:9] == 4'd8);
assign uart_rxtx_r = csr_bankarray_interface5_bank_bus_dat_w[7:0];
assign uart_rxtx_re = ((csr_bankarray_csrbank5_sel & csr_bankarray_interface5_bank_bus_we) & (csr_bankarray_interface5_bank_bus_adr[2:0] == 1'd0));
assign uart_rxtx_we = ((csr_bankarray_csrbank5_sel & (~csr_bankarray_interface5_bank_bus_we)) & (csr_bankarray_interface5_bank_bus_adr[2:0] == 1'd0));
assign csr_bankarray_csrbank5_txfull_r = csr_bankarray_interface5_bank_bus_dat_w[0];
assign csr_bankarray_csrbank5_txfull_re = ((csr_bankarray_csrbank5_sel & csr_bankarray_interface5_bank_bus_we) & (csr_bankarray_interface5_bank_bus_adr[2:0] == 1'd1));
assign csr_bankarray_csrbank5_txfull_we = ((csr_bankarray_csrbank5_sel & (~csr_bankarray_interface5_bank_bus_we)) & (csr_bankarray_interface5_bank_bus_adr[2:0] == 1'd1));
assign csr_bankarray_csrbank5_rxempty_r = csr_bankarray_interface5_bank_bus_dat_w[0];
assign csr_bankarray_csrbank5_rxempty_re = ((csr_bankarray_csrbank5_sel & csr_bankarray_interface5_bank_bus_we) & (csr_bankarray_interface5_bank_bus_adr[2:0] == 2'd2));
assign csr_bankarray_csrbank5_rxempty_we = ((csr_bankarray_csrbank5_sel & (~csr_bankarray_interface5_bank_bus_we)) & (csr_bankarray_interface5_bank_bus_adr[2:0] == 2'd2));
assign uart_eventmanager_status_r = csr_bankarray_interface5_bank_bus_dat_w[1:0];
assign uart_eventmanager_status_re = ((csr_bankarray_csrbank5_sel & csr_bankarray_interface5_bank_bus_we) & (csr_bankarray_interface5_bank_bus_adr[2:0] == 2'd3));
assign uart_eventmanager_status_we = ((csr_bankarray_csrbank5_sel & (~csr_bankarray_interface5_bank_bus_we)) & (csr_bankarray_interface5_bank_bus_adr[2:0] == 2'd3));
assign uart_eventmanager_pending_r = csr_bankarray_interface5_bank_bus_dat_w[1:0];
assign uart_eventmanager_pending_re = ((csr_bankarray_csrbank5_sel & csr_bankarray_interface5_bank_bus_we) & (csr_bankarray_interface5_bank_bus_adr[2:0] == 3'd4));
assign uart_eventmanager_pending_we = ((csr_bankarray_csrbank5_sel & (~csr_bankarray_interface5_bank_bus_we)) & (csr_bankarray_interface5_bank_bus_adr[2:0] == 3'd4));
assign csr_bankarray_csrbank5_ev_enable0_r = csr_bankarray_interface5_bank_bus_dat_w[1:0];
assign csr_bankarray_csrbank5_ev_enable0_re = ((csr_bankarray_csrbank5_sel & csr_bankarray_interface5_bank_bus_we) & (csr_bankarray_interface5_bank_bus_adr[2:0] == 3'd5));
assign csr_bankarray_csrbank5_ev_enable0_we = ((csr_bankarray_csrbank5_sel & (~csr_bankarray_interface5_bank_bus_we)) & (csr_bankarray_interface5_bank_bus_adr[2:0] == 3'd5));
assign csr_bankarray_csrbank5_txfull_w = uart_txfull_status;
assign uart_txfull_we = csr_bankarray_csrbank5_txfull_we;
assign csr_bankarray_csrbank5_rxempty_w = uart_rxempty_status;
assign uart_rxempty_we = csr_bankarray_csrbank5_rxempty_we;
assign csr_bankarray_csrbank5_ev_enable0_w = uart_eventmanager_storage[1:0];
assign csr_bankarray_csrbank6_sel = (csr_bankarray_interface6_bank_bus_adr[13:9] == 2'd3);
assign csr_bankarray_csrbank6_tuning_word3_r = csr_bankarray_interface6_bank_bus_dat_w[7:0];
assign csr_bankarray_csrbank6_tuning_word3_re = ((csr_bankarray_csrbank6_sel & csr_bankarray_interface6_bank_bus_we) & (csr_bankarray_interface6_bank_bus_adr[1:0] == 1'd0));
assign csr_bankarray_csrbank6_tuning_word3_we = ((csr_bankarray_csrbank6_sel & (~csr_bankarray_interface6_bank_bus_we)) & (csr_bankarray_interface6_bank_bus_adr[1:0] == 1'd0));
assign csr_bankarray_csrbank6_tuning_word2_r = csr_bankarray_interface6_bank_bus_dat_w[7:0];
assign csr_bankarray_csrbank6_tuning_word2_re = ((csr_bankarray_csrbank6_sel & csr_bankarray_interface6_bank_bus_we) & (csr_bankarray_interface6_bank_bus_adr[1:0] == 1'd1));
assign csr_bankarray_csrbank6_tuning_word2_we = ((csr_bankarray_csrbank6_sel & (~csr_bankarray_interface6_bank_bus_we)) & (csr_bankarray_interface6_bank_bus_adr[1:0] == 1'd1));
assign csr_bankarray_csrbank6_tuning_word1_r = csr_bankarray_interface6_bank_bus_dat_w[7:0];
assign csr_bankarray_csrbank6_tuning_word1_re = ((csr_bankarray_csrbank6_sel & csr_bankarray_interface6_bank_bus_we) & (csr_bankarray_interface6_bank_bus_adr[1:0] == 2'd2));
assign csr_bankarray_csrbank6_tuning_word1_we = ((csr_bankarray_csrbank6_sel & (~csr_bankarray_interface6_bank_bus_we)) & (csr_bankarray_interface6_bank_bus_adr[1:0] == 2'd2));
assign csr_bankarray_csrbank6_tuning_word0_r = csr_bankarray_interface6_bank_bus_dat_w[7:0];
assign csr_bankarray_csrbank6_tuning_word0_re = ((csr_bankarray_csrbank6_sel & csr_bankarray_interface6_bank_bus_we) & (csr_bankarray_interface6_bank_bus_adr[1:0] == 2'd3));
assign csr_bankarray_csrbank6_tuning_word0_we = ((csr_bankarray_csrbank6_sel & (~csr_bankarray_interface6_bank_bus_we)) & (csr_bankarray_interface6_bank_bus_adr[1:0] == 2'd3));
assign csr_bankarray_csrbank6_tuning_word3_w = basesoc_storage[31:24];
assign csr_bankarray_csrbank6_tuning_word2_w = basesoc_storage[23:16];
assign csr_bankarray_csrbank6_tuning_word1_w = basesoc_storage[15:8];
assign csr_bankarray_csrbank6_tuning_word0_w = basesoc_storage[7:0];
assign csr_interconnect_adr = basesoc_interface_adr;
assign csr_interconnect_we = basesoc_interface_we;
assign csr_interconnect_dat_w = basesoc_interface_dat_w;
assign basesoc_interface_dat_r = csr_interconnect_dat_r;
assign csr_bankarray_interface0_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface1_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface2_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface3_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface4_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface5_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface6_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_sram_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface0_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface1_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface2_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface3_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface4_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface5_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface6_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_sram_bus_we = csr_interconnect_we;
assign csr_bankarray_interface0_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface1_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface2_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface3_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface4_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface5_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface6_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_sram_bus_dat_w = csr_interconnect_dat_w;
assign csr_interconnect_dat_r = (((((((csr_bankarray_interface0_bank_bus_dat_r | csr_bankarray_interface1_bank_bus_dat_r) | csr_bankarray_interface2_bank_bus_dat_r) | csr_bankarray_interface3_bank_bus_dat_r) | csr_bankarray_interface4_bank_bus_dat_r) | csr_bankarray_interface5_bank_bus_dat_r) | csr_bankarray_interface6_bank_bus_dat_r) | csr_bankarray_sram_bus_dat_r);
assign slice_proxy0 = {user_btn4, user_btn3, user_btn2, user_btn1, user_btn0};
assign slice_proxy1 = {user_btn4, user_btn3, user_btn2, user_btn1, user_btn0};
assign slice_proxy2 = {user_btn4, user_btn3, user_btn2, user_btn1, user_btn0};
assign slice_proxy3 = {user_btn4, user_btn3, user_btn2, user_btn1, user_btn0};
assign slice_proxy4 = {user_btn4, user_btn3, user_btn2, user_btn1, user_btn0};
always @(*) begin
	array_muxed0 <= 30'd0;
	case (grant)
		1'd0: begin
			array_muxed0 <= basesoc_cpu_ibus_adr;
		end
		default: begin
			array_muxed0 <= basesoc_cpu_dbus_adr;
		end
	endcase
end
always @(*) begin
	array_muxed1 <= 32'd0;
	case (grant)
		1'd0: begin
			array_muxed1 <= basesoc_cpu_ibus_dat_w;
		end
		default: begin
			array_muxed1 <= basesoc_cpu_dbus_dat_w;
		end
	endcase
end
always @(*) begin
	array_muxed2 <= 4'd0;
	case (grant)
		1'd0: begin
			array_muxed2 <= basesoc_cpu_ibus_sel;
		end
		default: begin
			array_muxed2 <= basesoc_cpu_dbus_sel;
		end
	endcase
end
always @(*) begin
	array_muxed3 <= 1'd0;
	case (grant)
		1'd0: begin
			array_muxed3 <= basesoc_cpu_ibus_cyc;
		end
		default: begin
			array_muxed3 <= basesoc_cpu_dbus_cyc;
		end
	endcase
end
always @(*) begin
	array_muxed4 <= 1'd0;
	case (grant)
		1'd0: begin
			array_muxed4 <= basesoc_cpu_ibus_stb;
		end
		default: begin
			array_muxed4 <= basesoc_cpu_dbus_stb;
		end
	endcase
end
always @(*) begin
	array_muxed5 <= 1'd0;
	case (grant)
		1'd0: begin
			array_muxed5 <= basesoc_cpu_ibus_we;
		end
		default: begin
			array_muxed5 <= basesoc_cpu_dbus_we;
		end
	endcase
end
always @(*) begin
	array_muxed6 <= 3'd0;
	case (grant)
		1'd0: begin
			array_muxed6 <= basesoc_cpu_ibus_cti;
		end
		default: begin
			array_muxed6 <= basesoc_cpu_dbus_cti;
		end
	endcase
end
always @(*) begin
	array_muxed7 <= 2'd0;
	case (grant)
		1'd0: begin
			array_muxed7 <= basesoc_cpu_ibus_bte;
		end
		default: begin
			array_muxed7 <= basesoc_cpu_dbus_bte;
		end
	endcase
end
assign basesoc_rx = xilinxmultiregimpl0_regs1;
assign buttons_in_status = xilinxmultiregimpl1_regs1;
assign xilinxmultiregimpl1 = {user_btn4, user_btn3, user_btn2, user_btn1, user_btn0};

always @(posedge por_clk) begin
	int_rst <= (~cpu_reset);
end

always @(posedge sys_clk) begin
	if ((basesoc_soccontroller_bus_errors != 32'd4294967295)) begin
		if (basesoc_soccontroller_bus_error) begin
			basesoc_soccontroller_bus_errors <= (basesoc_soccontroller_bus_errors + 1'd1);
		end
	end
	basesoc_basesoc_ram_bus_ack <= 1'd0;
	if (((basesoc_basesoc_ram_bus_cyc & basesoc_basesoc_ram_bus_stb) & (~basesoc_basesoc_ram_bus_ack))) begin
		basesoc_basesoc_ram_bus_ack <= 1'd1;
	end
	basesoc_interface0_ram_bus_ack <= 1'd0;
	if (((basesoc_interface0_ram_bus_cyc & basesoc_interface0_ram_bus_stb) & (~basesoc_interface0_ram_bus_ack))) begin
		basesoc_interface0_ram_bus_ack <= 1'd1;
	end
	basesoc_interface1_ram_bus_ack <= 1'd0;
	if (((basesoc_interface1_ram_bus_cyc & basesoc_interface1_ram_bus_stb) & (~basesoc_interface1_ram_bus_ack))) begin
		basesoc_interface1_ram_bus_ack <= 1'd1;
	end
	basesoc_sink_ready <= 1'd0;
	if (((basesoc_sink_valid & (~basesoc_tx_busy)) & (~basesoc_sink_ready))) begin
		basesoc_tx_reg <= basesoc_sink_payload_data;
		basesoc_tx_bitcount <= 1'd0;
		basesoc_tx_busy <= 1'd1;
		serial_tx <= 1'd0;
	end else begin
		if ((basesoc_uart_clk_txen & basesoc_tx_busy)) begin
			basesoc_tx_bitcount <= (basesoc_tx_bitcount + 1'd1);
			if ((basesoc_tx_bitcount == 4'd8)) begin
				serial_tx <= 1'd1;
			end else begin
				if ((basesoc_tx_bitcount == 4'd9)) begin
					serial_tx <= 1'd1;
					basesoc_tx_busy <= 1'd0;
					basesoc_sink_ready <= 1'd1;
				end else begin
					serial_tx <= basesoc_tx_reg[0];
					basesoc_tx_reg <= {1'd0, basesoc_tx_reg[7:1]};
				end
			end
		end
	end
	if (basesoc_tx_busy) begin
		{basesoc_uart_clk_txen, basesoc_phase_accumulator_tx} <= (basesoc_phase_accumulator_tx + basesoc_storage);
	end else begin
		{basesoc_uart_clk_txen, basesoc_phase_accumulator_tx} <= basesoc_storage;
	end
	basesoc_source_valid <= 1'd0;
	basesoc_rx_r <= basesoc_rx;
	if ((~basesoc_rx_busy)) begin
		if (((~basesoc_rx) & basesoc_rx_r)) begin
			basesoc_rx_busy <= 1'd1;
			basesoc_rx_bitcount <= 1'd0;
		end
	end else begin
		if (basesoc_uart_clk_rxen) begin
			basesoc_rx_bitcount <= (basesoc_rx_bitcount + 1'd1);
			if ((basesoc_rx_bitcount == 1'd0)) begin
				if (basesoc_rx) begin
					basesoc_rx_busy <= 1'd0;
				end
			end else begin
				if ((basesoc_rx_bitcount == 4'd9)) begin
					basesoc_rx_busy <= 1'd0;
					if (basesoc_rx) begin
						basesoc_source_payload_data <= basesoc_rx_reg;
						basesoc_source_valid <= 1'd1;
					end
				end else begin
					basesoc_rx_reg <= {basesoc_rx, basesoc_rx_reg[7:1]};
				end
			end
		end
	end
	if (basesoc_rx_busy) begin
		{basesoc_uart_clk_rxen, basesoc_phase_accumulator_rx} <= (basesoc_phase_accumulator_rx + basesoc_storage);
	end else begin
		{basesoc_uart_clk_rxen, basesoc_phase_accumulator_rx} <= 32'd2147483648;
	end
	if (basesoc_uart_tx_clear) begin
		basesoc_uart_tx_pending <= 1'd0;
	end
	basesoc_uart_tx_old_trigger <= basesoc_uart_tx_trigger;
	if (((~basesoc_uart_tx_trigger) & basesoc_uart_tx_old_trigger)) begin
		basesoc_uart_tx_pending <= 1'd1;
	end
	if (basesoc_uart_rx_clear) begin
		basesoc_uart_rx_pending <= 1'd0;
	end
	basesoc_uart_rx_old_trigger <= basesoc_uart_rx_trigger;
	if (((~basesoc_uart_rx_trigger) & basesoc_uart_rx_old_trigger)) begin
		basesoc_uart_rx_pending <= 1'd1;
	end
	if (basesoc_uart_tx_fifo_syncfifo_re) begin
		basesoc_uart_tx_fifo_readable <= 1'd1;
	end else begin
		if (basesoc_uart_tx_fifo_re) begin
			basesoc_uart_tx_fifo_readable <= 1'd0;
		end
	end
	if (((basesoc_uart_tx_fifo_syncfifo_we & basesoc_uart_tx_fifo_syncfifo_writable) & (~basesoc_uart_tx_fifo_replace))) begin
		basesoc_uart_tx_fifo_produce <= (basesoc_uart_tx_fifo_produce + 1'd1);
	end
	if (basesoc_uart_tx_fifo_do_read) begin
		basesoc_uart_tx_fifo_consume <= (basesoc_uart_tx_fifo_consume + 1'd1);
	end
	if (((basesoc_uart_tx_fifo_syncfifo_we & basesoc_uart_tx_fifo_syncfifo_writable) & (~basesoc_uart_tx_fifo_replace))) begin
		if ((~basesoc_uart_tx_fifo_do_read)) begin
			basesoc_uart_tx_fifo_level0 <= (basesoc_uart_tx_fifo_level0 + 1'd1);
		end
	end else begin
		if (basesoc_uart_tx_fifo_do_read) begin
			basesoc_uart_tx_fifo_level0 <= (basesoc_uart_tx_fifo_level0 - 1'd1);
		end
	end
	if (basesoc_uart_rx_fifo_syncfifo_re) begin
		basesoc_uart_rx_fifo_readable <= 1'd1;
	end else begin
		if (basesoc_uart_rx_fifo_re) begin
			basesoc_uart_rx_fifo_readable <= 1'd0;
		end
	end
	if (((basesoc_uart_rx_fifo_syncfifo_we & basesoc_uart_rx_fifo_syncfifo_writable) & (~basesoc_uart_rx_fifo_replace))) begin
		basesoc_uart_rx_fifo_produce <= (basesoc_uart_rx_fifo_produce + 1'd1);
	end
	if (basesoc_uart_rx_fifo_do_read) begin
		basesoc_uart_rx_fifo_consume <= (basesoc_uart_rx_fifo_consume + 1'd1);
	end
	if (((basesoc_uart_rx_fifo_syncfifo_we & basesoc_uart_rx_fifo_syncfifo_writable) & (~basesoc_uart_rx_fifo_replace))) begin
		if ((~basesoc_uart_rx_fifo_do_read)) begin
			basesoc_uart_rx_fifo_level0 <= (basesoc_uart_rx_fifo_level0 + 1'd1);
		end
	end else begin
		if (basesoc_uart_rx_fifo_do_read) begin
			basesoc_uart_rx_fifo_level0 <= (basesoc_uart_rx_fifo_level0 - 1'd1);
		end
	end
	if (basesoc_uart_reset) begin
		basesoc_uart_tx_pending <= 1'd0;
		basesoc_uart_tx_old_trigger <= 1'd0;
		basesoc_uart_rx_pending <= 1'd0;
		basesoc_uart_rx_old_trigger <= 1'd0;
		basesoc_uart_tx_fifo_readable <= 1'd0;
		basesoc_uart_tx_fifo_level0 <= 5'd0;
		basesoc_uart_tx_fifo_produce <= 4'd0;
		basesoc_uart_tx_fifo_consume <= 4'd0;
		basesoc_uart_rx_fifo_readable <= 1'd0;
		basesoc_uart_rx_fifo_level0 <= 5'd0;
		basesoc_uart_rx_fifo_produce <= 4'd0;
		basesoc_uart_rx_fifo_consume <= 4'd0;
	end
	if (basesoc_timer_en_storage) begin
		if ((basesoc_timer_value == 1'd0)) begin
			basesoc_timer_value <= basesoc_timer_reload_storage;
		end else begin
			basesoc_timer_value <= (basesoc_timer_value - 1'd1);
		end
	end else begin
		basesoc_timer_value <= basesoc_timer_load_storage;
	end
	if (basesoc_timer_update_value_re) begin
		basesoc_timer_value_status <= basesoc_timer_value;
	end
	if (basesoc_timer_zero_clear) begin
		basesoc_timer_zero_pending <= 1'd0;
	end
	basesoc_timer_zero_old_trigger <= basesoc_timer_zero_trigger;
	if (((~basesoc_timer_zero_trigger) & basesoc_timer_zero_old_trigger)) begin
		basesoc_timer_zero_pending <= 1'd1;
	end
	wishbone2csr_state <= wishbone2csr_next_state;
	if (buttons_arriba_clear) begin
		buttons_arriba_pending <= 1'd0;
	end
	buttons_arriba_old_trigger <= buttons_arriba_trigger;
	if (((~buttons_arriba_trigger) & buttons_arriba_old_trigger)) begin
		buttons_arriba_pending <= 1'd1;
	end
	if (buttons_abajo_clear) begin
		buttons_abajo_pending <= 1'd0;
	end
	buttons_abajo_old_trigger <= buttons_abajo_trigger;
	if (((~buttons_abajo_trigger) & buttons_abajo_old_trigger)) begin
		buttons_abajo_pending <= 1'd1;
	end
	if (buttons_derecha_clear) begin
		buttons_derecha_pending <= 1'd0;
	end
	buttons_derecha_old_trigger <= buttons_derecha_trigger;
	if (((~buttons_derecha_trigger) & buttons_derecha_old_trigger)) begin
		buttons_derecha_pending <= 1'd1;
	end
	if (buttons_izquierda_clear) begin
		buttons_izquierda_pending <= 1'd0;
	end
	buttons_izquierda_old_trigger <= buttons_izquierda_trigger;
	if (((~buttons_izquierda_trigger) & buttons_izquierda_old_trigger)) begin
		buttons_izquierda_pending <= 1'd1;
	end
	if (buttons_pause_clear) begin
		buttons_pause_pending <= 1'd0;
	end
	buttons_pause_old_trigger <= buttons_pause_trigger;
	if (((~buttons_pause_trigger) & buttons_pause_old_trigger)) begin
		buttons_pause_pending <= 1'd1;
	end
	lcd_i80_state <= lcd_i80_next_state;
	if (rs_next_value_ce0) begin
		rs_1 <= rs_next_value0;
	end
	if (rd_next_value_ce1) begin
		rd_1 <= rd_next_value1;
	end
	if (wr_next_value_ce2) begin
		wr_1 <= wr_next_value2;
	end
	if (db_next_value_ce3) begin
		db_1 <= db_next_value3;
	end
	if (busy_next_value_ce4) begin
		busy <= busy_next_value4;
	end
	if (count2_next_value_ce5) begin
		count2 <= count2_next_value5;
	end
	if (rst_next_value_ce6) begin
		rst_1 <= rst_next_value6;
	end
	if (manage_next_value_ce7) begin
		manage <= manage_next_value7;
	end
	if (manage_ant_next_value_ce8) begin
		manage_ant <= manage_ant_next_value8;
	end
	if (countwr_next_value_ce9) begin
		countwr <= countwr_next_value9;
	end
	if (uart_tx_clear) begin
		uart_tx_pending <= 1'd0;
	end
	uart_tx_old_trigger <= uart_tx_trigger;
	if (((~uart_tx_trigger) & uart_tx_old_trigger)) begin
		uart_tx_pending <= 1'd1;
	end
	if (uart_rx_clear) begin
		uart_rx_pending <= 1'd0;
	end
	uart_rx_old_trigger <= uart_rx_trigger;
	if (((~uart_rx_trigger) & uart_rx_old_trigger)) begin
		uart_rx_pending <= 1'd1;
	end
	if (uart_tx_fifo_syncfifo_re) begin
		uart_tx_fifo_readable <= 1'd1;
	end else begin
		if (uart_tx_fifo_re) begin
			uart_tx_fifo_readable <= 1'd0;
		end
	end
	if (((uart_tx_fifo_syncfifo_we & uart_tx_fifo_syncfifo_writable) & (~uart_tx_fifo_replace))) begin
		uart_tx_fifo_produce <= (uart_tx_fifo_produce + 1'd1);
	end
	if (uart_tx_fifo_do_read) begin
		uart_tx_fifo_consume <= (uart_tx_fifo_consume + 1'd1);
	end
	if (((uart_tx_fifo_syncfifo_we & uart_tx_fifo_syncfifo_writable) & (~uart_tx_fifo_replace))) begin
		if ((~uart_tx_fifo_do_read)) begin
			uart_tx_fifo_level0 <= (uart_tx_fifo_level0 + 1'd1);
		end
	end else begin
		if (uart_tx_fifo_do_read) begin
			uart_tx_fifo_level0 <= (uart_tx_fifo_level0 - 1'd1);
		end
	end
	if (uart_rx_fifo_syncfifo_re) begin
		uart_rx_fifo_readable <= 1'd1;
	end else begin
		if (uart_rx_fifo_re) begin
			uart_rx_fifo_readable <= 1'd0;
		end
	end
	if (((uart_rx_fifo_syncfifo_we & uart_rx_fifo_syncfifo_writable) & (~uart_rx_fifo_replace))) begin
		uart_rx_fifo_produce <= (uart_rx_fifo_produce + 1'd1);
	end
	if (uart_rx_fifo_do_read) begin
		uart_rx_fifo_consume <= (uart_rx_fifo_consume + 1'd1);
	end
	if (((uart_rx_fifo_syncfifo_we & uart_rx_fifo_syncfifo_writable) & (~uart_rx_fifo_replace))) begin
		if ((~uart_rx_fifo_do_read)) begin
			uart_rx_fifo_level0 <= (uart_rx_fifo_level0 + 1'd1);
		end
	end else begin
		if (uart_rx_fifo_do_read) begin
			uart_rx_fifo_level0 <= (uart_rx_fifo_level0 - 1'd1);
		end
	end
	if (reset) begin
		uart_tx_pending <= 1'd0;
		uart_tx_old_trigger <= 1'd0;
		uart_rx_pending <= 1'd0;
		uart_rx_old_trigger <= 1'd0;
		uart_tx_fifo_readable <= 1'd0;
		uart_tx_fifo_level0 <= 5'd0;
		uart_tx_fifo_produce <= 4'd0;
		uart_tx_fifo_consume <= 4'd0;
		uart_rx_fifo_readable <= 1'd0;
		uart_rx_fifo_level0 <= 5'd0;
		uart_rx_fifo_produce <= 4'd0;
		uart_rx_fifo_consume <= 4'd0;
	end
	case (grant)
		1'd0: begin
			if ((~request[0])) begin
				if (request[1]) begin
					grant <= 1'd1;
				end
			end
		end
		1'd1: begin
			if ((~request[1])) begin
				if (request[0]) begin
					grant <= 1'd0;
				end
			end
		end
	endcase
	slave_sel_r <= slave_sel;
	if (wait_1) begin
		if ((~done)) begin
			count <= (count - 1'd1);
		end
	end else begin
		count <= 20'd1000000;
	end
	csr_bankarray_interface0_bank_bus_dat_r <= 1'd0;
	if (csr_bankarray_csrbank0_sel) begin
		case (csr_bankarray_interface0_bank_bus_adr[2:0])
			1'd0: begin
				csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_in_w;
			end
			1'd1: begin
				csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_dir_w;
			end
			2'd2: begin
				csr_bankarray_interface0_bank_bus_dat_r <= status_w;
			end
			2'd3: begin
				csr_bankarray_interface0_bank_bus_dat_r <= pending_w;
			end
			3'd4: begin
				csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_ev_enable0_w;
			end
		endcase
	end
	if (csr_bankarray_csrbank0_ev_enable0_re) begin
		storage[4:0] <= csr_bankarray_csrbank0_ev_enable0_r;
	end
	re <= csr_bankarray_csrbank0_ev_enable0_re;
	csr_bankarray_interface1_bank_bus_dat_r <= 1'd0;
	if (csr_bankarray_csrbank1_sel) begin
		case (csr_bankarray_interface1_bank_bus_adr[3:0])
			1'd0: begin
				csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_reset0_w;
			end
			1'd1: begin
				csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_scratch3_w;
			end
			2'd2: begin
				csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_scratch2_w;
			end
			2'd3: begin
				csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_scratch1_w;
			end
			3'd4: begin
				csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_scratch0_w;
			end
			3'd5: begin
				csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_bus_errors3_w;
			end
			3'd6: begin
				csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_bus_errors2_w;
			end
			3'd7: begin
				csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_bus_errors1_w;
			end
			4'd8: begin
				csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_bus_errors0_w;
			end
		endcase
	end
	if (csr_bankarray_csrbank1_reset0_re) begin
		basesoc_soccontroller_reset_storage <= csr_bankarray_csrbank1_reset0_r;
	end
	basesoc_soccontroller_reset_re <= csr_bankarray_csrbank1_reset0_re;
	if (csr_bankarray_csrbank1_scratch3_re) begin
		basesoc_soccontroller_scratch_storage[31:24] <= csr_bankarray_csrbank1_scratch3_r;
	end
	if (csr_bankarray_csrbank1_scratch2_re) begin
		basesoc_soccontroller_scratch_storage[23:16] <= csr_bankarray_csrbank1_scratch2_r;
	end
	if (csr_bankarray_csrbank1_scratch1_re) begin
		basesoc_soccontroller_scratch_storage[15:8] <= csr_bankarray_csrbank1_scratch1_r;
	end
	if (csr_bankarray_csrbank1_scratch0_re) begin
		basesoc_soccontroller_scratch_storage[7:0] <= csr_bankarray_csrbank1_scratch0_r;
	end
	basesoc_soccontroller_scratch_re <= csr_bankarray_csrbank1_scratch0_re;
	csr_bankarray_sel_r <= csr_bankarray_sel;
	csr_bankarray_interface2_bank_bus_dat_r <= 1'd0;
	if (csr_bankarray_csrbank2_sel) begin
		case (csr_bankarray_interface2_bank_bus_adr[2:0])
			1'd0: begin
				csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_DATA0_w;
			end
			1'd1: begin
				csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_ADDR0_w;
			end
			2'd2: begin
				csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_BUSY_w;
			end
			2'd3: begin
				csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_START0_w;
			end
			3'd4: begin
				csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_OPTION0_w;
			end
			3'd5: begin
				csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_CS_0_w;
			end
		endcase
	end
	if (csr_bankarray_csrbank2_DATA0_re) begin
		DATA_storage[7:0] <= csr_bankarray_csrbank2_DATA0_r;
	end
	DATA_re <= csr_bankarray_csrbank2_DATA0_re;
	if (csr_bankarray_csrbank2_ADDR0_re) begin
		ADDR_storage[7:0] <= csr_bankarray_csrbank2_ADDR0_r;
	end
	ADDR_re <= csr_bankarray_csrbank2_ADDR0_re;
	if (csr_bankarray_csrbank2_START0_re) begin
		START_storage[1:0] <= csr_bankarray_csrbank2_START0_r;
	end
	START_re <= csr_bankarray_csrbank2_START0_re;
	if (csr_bankarray_csrbank2_OPTION0_re) begin
		OPTION_storage <= csr_bankarray_csrbank2_OPTION0_r;
	end
	OPTION_re <= csr_bankarray_csrbank2_OPTION0_re;
	if (csr_bankarray_csrbank2_CS_0_re) begin
		CS__storage <= csr_bankarray_csrbank2_CS_0_r;
	end
	CS__re <= csr_bankarray_csrbank2_CS_0_re;
	csr_bankarray_interface3_bank_bus_dat_r <= 1'd0;
	if (csr_bankarray_csrbank3_sel) begin
		case (csr_bankarray_interface3_bank_bus_adr[4:0])
			1'd0: begin
				csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_load3_w;
			end
			1'd1: begin
				csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_load2_w;
			end
			2'd2: begin
				csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_load1_w;
			end
			2'd3: begin
				csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_load0_w;
			end
			3'd4: begin
				csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_reload3_w;
			end
			3'd5: begin
				csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_reload2_w;
			end
			3'd6: begin
				csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_reload1_w;
			end
			3'd7: begin
				csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_reload0_w;
			end
			4'd8: begin
				csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_en0_w;
			end
			4'd9: begin
				csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_update_value0_w;
			end
			4'd10: begin
				csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_value3_w;
			end
			4'd11: begin
				csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_value2_w;
			end
			4'd12: begin
				csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_value1_w;
			end
			4'd13: begin
				csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_value0_w;
			end
			4'd14: begin
				csr_bankarray_interface3_bank_bus_dat_r <= basesoc_timer_eventmanager_status_w;
			end
			4'd15: begin
				csr_bankarray_interface3_bank_bus_dat_r <= basesoc_timer_eventmanager_pending_w;
			end
			5'd16: begin
				csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_ev_enable0_w;
			end
		endcase
	end
	if (csr_bankarray_csrbank3_load3_re) begin
		basesoc_timer_load_storage[31:24] <= csr_bankarray_csrbank3_load3_r;
	end
	if (csr_bankarray_csrbank3_load2_re) begin
		basesoc_timer_load_storage[23:16] <= csr_bankarray_csrbank3_load2_r;
	end
	if (csr_bankarray_csrbank3_load1_re) begin
		basesoc_timer_load_storage[15:8] <= csr_bankarray_csrbank3_load1_r;
	end
	if (csr_bankarray_csrbank3_load0_re) begin
		basesoc_timer_load_storage[7:0] <= csr_bankarray_csrbank3_load0_r;
	end
	basesoc_timer_load_re <= csr_bankarray_csrbank3_load0_re;
	if (csr_bankarray_csrbank3_reload3_re) begin
		basesoc_timer_reload_storage[31:24] <= csr_bankarray_csrbank3_reload3_r;
	end
	if (csr_bankarray_csrbank3_reload2_re) begin
		basesoc_timer_reload_storage[23:16] <= csr_bankarray_csrbank3_reload2_r;
	end
	if (csr_bankarray_csrbank3_reload1_re) begin
		basesoc_timer_reload_storage[15:8] <= csr_bankarray_csrbank3_reload1_r;
	end
	if (csr_bankarray_csrbank3_reload0_re) begin
		basesoc_timer_reload_storage[7:0] <= csr_bankarray_csrbank3_reload0_r;
	end
	basesoc_timer_reload_re <= csr_bankarray_csrbank3_reload0_re;
	if (csr_bankarray_csrbank3_en0_re) begin
		basesoc_timer_en_storage <= csr_bankarray_csrbank3_en0_r;
	end
	basesoc_timer_en_re <= csr_bankarray_csrbank3_en0_re;
	if (csr_bankarray_csrbank3_update_value0_re) begin
		basesoc_timer_update_value_storage <= csr_bankarray_csrbank3_update_value0_r;
	end
	basesoc_timer_update_value_re <= csr_bankarray_csrbank3_update_value0_re;
	if (csr_bankarray_csrbank3_ev_enable0_re) begin
		basesoc_timer_eventmanager_storage <= csr_bankarray_csrbank3_ev_enable0_r;
	end
	basesoc_timer_eventmanager_re <= csr_bankarray_csrbank3_ev_enable0_re;
	csr_bankarray_interface4_bank_bus_dat_r <= 1'd0;
	if (csr_bankarray_csrbank4_sel) begin
		case (csr_bankarray_interface4_bank_bus_adr[2:0])
			1'd0: begin
				csr_bankarray_interface4_bank_bus_dat_r <= basesoc_uart_rxtx_w;
			end
			1'd1: begin
				csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_txfull_w;
			end
			2'd2: begin
				csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_rxempty_w;
			end
			2'd3: begin
				csr_bankarray_interface4_bank_bus_dat_r <= basesoc_uart_eventmanager_status_w;
			end
			3'd4: begin
				csr_bankarray_interface4_bank_bus_dat_r <= basesoc_uart_eventmanager_pending_w;
			end
			3'd5: begin
				csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_ev_enable0_w;
			end
		endcase
	end
	if (csr_bankarray_csrbank4_ev_enable0_re) begin
		basesoc_uart_eventmanager_storage[1:0] <= csr_bankarray_csrbank4_ev_enable0_r;
	end
	basesoc_uart_eventmanager_re <= csr_bankarray_csrbank4_ev_enable0_re;
	csr_bankarray_interface5_bank_bus_dat_r <= 1'd0;
	if (csr_bankarray_csrbank5_sel) begin
		case (csr_bankarray_interface5_bank_bus_adr[2:0])
			1'd0: begin
				csr_bankarray_interface5_bank_bus_dat_r <= uart_rxtx_w;
			end
			1'd1: begin
				csr_bankarray_interface5_bank_bus_dat_r <= csr_bankarray_csrbank5_txfull_w;
			end
			2'd2: begin
				csr_bankarray_interface5_bank_bus_dat_r <= csr_bankarray_csrbank5_rxempty_w;
			end
			2'd3: begin
				csr_bankarray_interface5_bank_bus_dat_r <= uart_eventmanager_status_w;
			end
			3'd4: begin
				csr_bankarray_interface5_bank_bus_dat_r <= uart_eventmanager_pending_w;
			end
			3'd5: begin
				csr_bankarray_interface5_bank_bus_dat_r <= csr_bankarray_csrbank5_ev_enable0_w;
			end
		endcase
	end
	if (csr_bankarray_csrbank5_ev_enable0_re) begin
		uart_eventmanager_storage[1:0] <= csr_bankarray_csrbank5_ev_enable0_r;
	end
	uart_eventmanager_re <= csr_bankarray_csrbank5_ev_enable0_re;
	csr_bankarray_interface6_bank_bus_dat_r <= 1'd0;
	if (csr_bankarray_csrbank6_sel) begin
		case (csr_bankarray_interface6_bank_bus_adr[1:0])
			1'd0: begin
				csr_bankarray_interface6_bank_bus_dat_r <= csr_bankarray_csrbank6_tuning_word3_w;
			end
			1'd1: begin
				csr_bankarray_interface6_bank_bus_dat_r <= csr_bankarray_csrbank6_tuning_word2_w;
			end
			2'd2: begin
				csr_bankarray_interface6_bank_bus_dat_r <= csr_bankarray_csrbank6_tuning_word1_w;
			end
			2'd3: begin
				csr_bankarray_interface6_bank_bus_dat_r <= csr_bankarray_csrbank6_tuning_word0_w;
			end
		endcase
	end
	if (csr_bankarray_csrbank6_tuning_word3_re) begin
		basesoc_storage[31:24] <= csr_bankarray_csrbank6_tuning_word3_r;
	end
	if (csr_bankarray_csrbank6_tuning_word2_re) begin
		basesoc_storage[23:16] <= csr_bankarray_csrbank6_tuning_word2_r;
	end
	if (csr_bankarray_csrbank6_tuning_word1_re) begin
		basesoc_storage[15:8] <= csr_bankarray_csrbank6_tuning_word1_r;
	end
	if (csr_bankarray_csrbank6_tuning_word0_re) begin
		basesoc_storage[7:0] <= csr_bankarray_csrbank6_tuning_word0_r;
	end
	basesoc_re <= csr_bankarray_csrbank6_tuning_word0_re;
	if (sys_rst) begin
		basesoc_soccontroller_reset_storage <= 1'd0;
		basesoc_soccontroller_reset_re <= 1'd0;
		basesoc_soccontroller_scratch_storage <= 32'd305419896;
		basesoc_soccontroller_scratch_re <= 1'd0;
		basesoc_soccontroller_bus_errors <= 32'd0;
		basesoc_basesoc_ram_bus_ack <= 1'd0;
		basesoc_interface0_ram_bus_ack <= 1'd0;
		basesoc_interface1_ram_bus_ack <= 1'd0;
		serial_tx <= 1'd1;
		basesoc_storage <= 32'd4947802;
		basesoc_re <= 1'd0;
		basesoc_sink_ready <= 1'd0;
		basesoc_uart_clk_txen <= 1'd0;
		basesoc_tx_busy <= 1'd0;
		basesoc_source_valid <= 1'd0;
		basesoc_uart_clk_rxen <= 1'd0;
		basesoc_rx_r <= 1'd0;
		basesoc_rx_busy <= 1'd0;
		basesoc_uart_tx_pending <= 1'd0;
		basesoc_uart_tx_old_trigger <= 1'd0;
		basesoc_uart_rx_pending <= 1'd0;
		basesoc_uart_rx_old_trigger <= 1'd0;
		basesoc_uart_eventmanager_storage <= 2'd0;
		basesoc_uart_eventmanager_re <= 1'd0;
		basesoc_uart_tx_fifo_readable <= 1'd0;
		basesoc_uart_tx_fifo_level0 <= 5'd0;
		basesoc_uart_tx_fifo_produce <= 4'd0;
		basesoc_uart_tx_fifo_consume <= 4'd0;
		basesoc_uart_rx_fifo_readable <= 1'd0;
		basesoc_uart_rx_fifo_level0 <= 5'd0;
		basesoc_uart_rx_fifo_produce <= 4'd0;
		basesoc_uart_rx_fifo_consume <= 4'd0;
		basesoc_timer_load_storage <= 32'd0;
		basesoc_timer_load_re <= 1'd0;
		basesoc_timer_reload_storage <= 32'd0;
		basesoc_timer_reload_re <= 1'd0;
		basesoc_timer_en_storage <= 1'd0;
		basesoc_timer_en_re <= 1'd0;
		basesoc_timer_update_value_storage <= 1'd0;
		basesoc_timer_update_value_re <= 1'd0;
		basesoc_timer_value_status <= 32'd0;
		basesoc_timer_zero_pending <= 1'd0;
		basesoc_timer_zero_old_trigger <= 1'd0;
		basesoc_timer_eventmanager_storage <= 1'd0;
		basesoc_timer_eventmanager_re <= 1'd0;
		basesoc_timer_value <= 32'd0;
		buttons_arriba_pending <= 1'd0;
		buttons_arriba_old_trigger <= 1'd0;
		buttons_abajo_pending <= 1'd0;
		buttons_abajo_old_trigger <= 1'd0;
		buttons_derecha_pending <= 1'd0;
		buttons_derecha_old_trigger <= 1'd0;
		buttons_izquierda_pending <= 1'd0;
		buttons_izquierda_old_trigger <= 1'd0;
		buttons_pause_pending <= 1'd0;
		buttons_pause_old_trigger <= 1'd0;
		DATA_storage <= 8'd0;
		DATA_re <= 1'd0;
		ADDR_storage <= 8'd0;
		ADDR_re <= 1'd0;
		START_storage <= 2'd0;
		START_re <= 1'd0;
		OPTION_storage <= 1'd0;
		OPTION_re <= 1'd0;
		CS__storage <= 1'd0;
		CS__re <= 1'd0;
		busy <= 1'd0;
		db_1 <= 8'd0;
		rs_1 <= 1'd0;
		rd_1 <= 1'd0;
		wr_1 <= 1'd0;
		rst_1 <= 1'd0;
		manage <= 4'd0;
		count2 <= 4'd0;
		countwr <= 4'd0;
		manage_ant <= 3'd0;
		uart_tx_pending <= 1'd0;
		uart_tx_old_trigger <= 1'd0;
		uart_rx_pending <= 1'd0;
		uart_rx_old_trigger <= 1'd0;
		uart_eventmanager_storage <= 2'd0;
		uart_eventmanager_re <= 1'd0;
		uart_tx_fifo_readable <= 1'd0;
		uart_tx_fifo_level0 <= 5'd0;
		uart_tx_fifo_produce <= 4'd0;
		uart_tx_fifo_consume <= 4'd0;
		uart_rx_fifo_readable <= 1'd0;
		uart_rx_fifo_level0 <= 5'd0;
		uart_rx_fifo_produce <= 4'd0;
		uart_rx_fifo_consume <= 4'd0;
		wishbone2csr_state <= 1'd0;
		storage <= 5'd0;
		re <= 1'd0;
		lcd_i80_state <= 3'd0;
		grant <= 1'd0;
		slave_sel_r <= 4'd0;
		count <= 20'd1000000;
		csr_bankarray_sel_r <= 1'd0;
	end
	xilinxmultiregimpl0_regs0 <= serial_rx;
	xilinxmultiregimpl0_regs1 <= xilinxmultiregimpl0_regs0;
	xilinxmultiregimpl1_regs0 <= {user_btn4, user_btn3, user_btn2, user_btn1, user_btn0};
	xilinxmultiregimpl1_regs1 <= xilinxmultiregimpl1_regs0;
end

reg [31:0] mem[0:8191];
reg [31:0] memdat;
always @(posedge sys_clk) begin
	memdat <= mem[basesoc_basesoc_adr];
end

assign basesoc_basesoc_dat_r = memdat;

initial begin
	$readmemh("mem.init", mem);
end

reg [31:0] mem_1[0:1023];
reg [9:0] memadr;
always @(posedge sys_clk) begin
	if (basesoc_sram0_we[0])
		mem_1[basesoc_sram0_adr][7:0] <= basesoc_sram0_dat_w[7:0];
	if (basesoc_sram0_we[1])
		mem_1[basesoc_sram0_adr][15:8] <= basesoc_sram0_dat_w[15:8];
	if (basesoc_sram0_we[2])
		mem_1[basesoc_sram0_adr][23:16] <= basesoc_sram0_dat_w[23:16];
	if (basesoc_sram0_we[3])
		mem_1[basesoc_sram0_adr][31:24] <= basesoc_sram0_dat_w[31:24];
	memadr <= basesoc_sram0_adr;
end

assign basesoc_sram0_dat_r = mem_1[memadr];

initial begin
	$readmemh("mem_1.init", mem_1);
end

reg [31:0] mem_2[0:4095];
reg [11:0] memadr_1;
always @(posedge sys_clk) begin
	if (basesoc_sram1_we[0])
		mem_2[basesoc_sram1_adr][7:0] <= basesoc_sram1_dat_w[7:0];
	if (basesoc_sram1_we[1])
		mem_2[basesoc_sram1_adr][15:8] <= basesoc_sram1_dat_w[15:8];
	if (basesoc_sram1_we[2])
		mem_2[basesoc_sram1_adr][23:16] <= basesoc_sram1_dat_w[23:16];
	if (basesoc_sram1_we[3])
		mem_2[basesoc_sram1_adr][31:24] <= basesoc_sram1_dat_w[31:24];
	memadr_1 <= basesoc_sram1_adr;
end

assign basesoc_sram1_dat_r = mem_2[memadr_1];

initial begin
	$readmemh("mem_2.init", mem_2);
end

reg [7:0] mem_3[0:43];
reg [5:0] memadr_2;
always @(posedge sys_clk) begin
	memadr_2 <= csr_bankarray_adr;
end

assign csr_bankarray_dat_r = mem_3[memadr_2];

initial begin
	$readmemh("mem_3.init", mem_3);
end

reg [9:0] storage_1[0:15];
reg [9:0] memdat_1;
reg [9:0] memdat_2;
always @(posedge sys_clk) begin
	if (basesoc_uart_tx_fifo_wrport_we)
		storage_1[basesoc_uart_tx_fifo_wrport_adr] <= basesoc_uart_tx_fifo_wrport_dat_w;
	memdat_1 <= storage_1[basesoc_uart_tx_fifo_wrport_adr];
end

always @(posedge sys_clk) begin
	if (basesoc_uart_tx_fifo_rdport_re)
		memdat_2 <= storage_1[basesoc_uart_tx_fifo_rdport_adr];
end

assign basesoc_uart_tx_fifo_wrport_dat_r = memdat_1;
assign basesoc_uart_tx_fifo_rdport_dat_r = memdat_2;

reg [9:0] storage_2[0:15];
reg [9:0] memdat_3;
reg [9:0] memdat_4;
always @(posedge sys_clk) begin
	if (basesoc_uart_rx_fifo_wrport_we)
		storage_2[basesoc_uart_rx_fifo_wrport_adr] <= basesoc_uart_rx_fifo_wrport_dat_w;
	memdat_3 <= storage_2[basesoc_uart_rx_fifo_wrport_adr];
end

always @(posedge sys_clk) begin
	if (basesoc_uart_rx_fifo_rdport_re)
		memdat_4 <= storage_2[basesoc_uart_rx_fifo_rdport_adr];
end

assign basesoc_uart_rx_fifo_wrport_dat_r = memdat_3;
assign basesoc_uart_rx_fifo_rdport_dat_r = memdat_4;

reg [9:0] storage_3[0:15];
reg [9:0] memdat_5;
reg [9:0] memdat_6;
always @(posedge sys_clk) begin
	if (uart_tx_fifo_wrport_we)
		storage_3[uart_tx_fifo_wrport_adr] <= uart_tx_fifo_wrport_dat_w;
	memdat_5 <= storage_3[uart_tx_fifo_wrport_adr];
end

always @(posedge sys_clk) begin
	if (uart_tx_fifo_rdport_re)
		memdat_6 <= storage_3[uart_tx_fifo_rdport_adr];
end

assign uart_tx_fifo_wrport_dat_r = memdat_5;
assign uart_tx_fifo_rdport_dat_r = memdat_6;

reg [9:0] storage_4[0:15];
reg [9:0] memdat_7;
reg [9:0] memdat_8;
always @(posedge sys_clk) begin
	if (uart_rx_fifo_wrport_we)
		storage_4[uart_rx_fifo_wrport_adr] <= uart_rx_fifo_wrport_dat_w;
	memdat_7 <= storage_4[uart_rx_fifo_wrport_adr];
end

always @(posedge sys_clk) begin
	if (uart_rx_fifo_rdport_re)
		memdat_8 <= storage_4[uart_rx_fifo_rdport_adr];
end

assign uart_rx_fifo_wrport_dat_r = memdat_7;
assign uart_rx_fifo_rdport_dat_r = memdat_8;

VexRiscv VexRiscv(
	.clk(sys_clk),
	.dBusWishbone_ACK(basesoc_cpu_dbus_ack),
	.dBusWishbone_DAT_MISO(basesoc_cpu_dbus_dat_r),
	.dBusWishbone_ERR(basesoc_cpu_dbus_err),
	.externalInterruptArray(basesoc_cpu_interrupt),
	.externalResetVector(basesoc_vexriscv),
	.iBusWishbone_ACK(basesoc_cpu_ibus_ack),
	.iBusWishbone_DAT_MISO(basesoc_cpu_ibus_dat_r),
	.iBusWishbone_ERR(basesoc_cpu_ibus_err),
	.reset((sys_rst | basesoc_cpu_reset)),
	.softwareInterrupt(1'd0),
	.timerInterrupt(1'd0),
	.dBusWishbone_ADR(basesoc_cpu_dbus_adr),
	.dBusWishbone_BTE(basesoc_cpu_dbus_bte),
	.dBusWishbone_CTI(basesoc_cpu_dbus_cti),
	.dBusWishbone_CYC(basesoc_cpu_dbus_cyc),
	.dBusWishbone_DAT_MOSI(basesoc_cpu_dbus_dat_w),
	.dBusWishbone_SEL(basesoc_cpu_dbus_sel),
	.dBusWishbone_STB(basesoc_cpu_dbus_stb),
	.dBusWishbone_WE(basesoc_cpu_dbus_we),
	.iBusWishbone_ADR(basesoc_cpu_ibus_adr),
	.iBusWishbone_BTE(basesoc_cpu_ibus_bte),
	.iBusWishbone_CTI(basesoc_cpu_ibus_cti),
	.iBusWishbone_CYC(basesoc_cpu_ibus_cyc),
	.iBusWishbone_DAT_MOSI(basesoc_cpu_ibus_dat_w),
	.iBusWishbone_SEL(basesoc_cpu_ibus_sel),
	.iBusWishbone_STB(basesoc_cpu_ibus_stb),
	.iBusWishbone_WE(basesoc_cpu_ibus_we)
);

endmodule
